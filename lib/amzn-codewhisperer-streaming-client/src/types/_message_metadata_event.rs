// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Streaming Response Event for AssistantResponse Metadata
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MessageMetadataEvent {
    /// Unique identifier for the conversation
    pub conversation_id: ::std::option::Option<::std::string::String>,
}
impl MessageMetadataEvent {
    /// Unique identifier for the conversation
    pub fn conversation_id(&self) -> ::std::option::Option<&str> {
        self.conversation_id.as_deref()
    }
}
impl MessageMetadataEvent {
    /// Creates a new builder-style object to manufacture
    /// [`MessageMetadataEvent`](crate::types::MessageMetadataEvent).
    pub fn builder() -> crate::types::builders::MessageMetadataEventBuilder {
        crate::types::builders::MessageMetadataEventBuilder::default()
    }
}

/// A builder for [`MessageMetadataEvent`](crate::types::MessageMetadataEvent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MessageMetadataEventBuilder {
    pub(crate) conversation_id: ::std::option::Option<::std::string::String>,
}
impl MessageMetadataEventBuilder {
    /// Unique identifier for the conversation
    pub fn conversation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conversation_id = ::std::option::Option::Some(input.into());
        self
    }

    /// Unique identifier for the conversation
    pub fn set_conversation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conversation_id = input;
        self
    }

    /// Unique identifier for the conversation
    pub fn get_conversation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.conversation_id
    }

    /// Consumes the builder and constructs a
    /// [`MessageMetadataEvent`](crate::types::MessageMetadataEvent).
    pub fn build(self) -> crate::types::MessageMetadataEvent {
        crate::types::MessageMetadataEvent {
            conversation_id: self.conversation_id,
        }
    }
}
