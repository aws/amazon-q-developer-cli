// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct FileContext {
    #[allow(missing_docs)] // documentation missing in model
    pub left_file_content: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub right_file_content: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub filename: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub programming_language: ::std::option::Option<crate::types::ProgrammingLanguage>,
}
impl FileContext {
    #[allow(missing_docs)] // documentation missing in model
    pub fn left_file_content(&self) -> ::std::option::Option<&str> {
        self.left_file_content.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn right_file_content(&self) -> ::std::option::Option<&str> {
        self.right_file_content.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn filename(&self) -> ::std::option::Option<&str> {
        self.filename.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn programming_language(&self) -> ::std::option::Option<&crate::types::ProgrammingLanguage> {
        self.programming_language.as_ref()
    }
}
impl ::std::fmt::Debug for FileContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FileContext");
        formatter.field("left_file_content", &"*** Sensitive Data Redacted ***");
        formatter.field("right_file_content", &"*** Sensitive Data Redacted ***");
        formatter.field("filename", &"*** Sensitive Data Redacted ***");
        formatter.field("programming_language", &self.programming_language);
        formatter.finish()
    }
}
impl FileContext {
    /// Creates a new builder-style object to manufacture [`FileContext`](crate::types::FileContext).
    pub fn builder() -> crate::types::builders::FileContextBuilder {
        crate::types::builders::FileContextBuilder::default()
    }
}

/// A builder for [`FileContext`](crate::types::FileContext).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct FileContextBuilder {
    pub(crate) left_file_content: ::std::option::Option<::std::string::String>,
    pub(crate) right_file_content: ::std::option::Option<::std::string::String>,
    pub(crate) filename: ::std::option::Option<::std::string::String>,
    pub(crate) programming_language: ::std::option::Option<crate::types::ProgrammingLanguage>,
}
impl FileContextBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn left_file_content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.left_file_content = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_left_file_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.left_file_content = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_left_file_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.left_file_content
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn right_file_content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.right_file_content = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_right_file_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.right_file_content = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_right_file_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.right_file_content
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn filename(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filename = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_filename(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filename = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_filename(&self) -> &::std::option::Option<::std::string::String> {
        &self.filename
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn programming_language(mut self, input: crate::types::ProgrammingLanguage) -> Self {
        self.programming_language = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_programming_language(mut self, input: ::std::option::Option<crate::types::ProgrammingLanguage>) -> Self {
        self.programming_language = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_programming_language(&self) -> &::std::option::Option<crate::types::ProgrammingLanguage> {
        &self.programming_language
    }
    /// Consumes the builder and constructs a [`FileContext`](crate::types::FileContext).
    pub fn build(self) -> crate::types::FileContext {
        crate::types::FileContext {
            left_file_content: self.left_file_content,
            right_file_content: self.right_file_content,
            filename: self.filename,
            programming_language: self.programming_language,
        }
    }
}
impl ::std::fmt::Debug for FileContextBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FileContextBuilder");
        formatter.field("left_file_content", &"*** Sensitive Data Redacted ***");
        formatter.field("right_file_content", &"*** Sensitive Data Redacted ***");
        formatter.field("filename", &"*** Sensitive Data Redacted ***");
        formatter.field("programming_language", &self.programming_language);
        formatter.finish()
    }
}
