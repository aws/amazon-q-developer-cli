// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProgrammingLanguage {
    #[allow(missing_docs)] // documentation missing in model
    pub language_name: ::std::option::Option<::std::string::String>,
}
impl ProgrammingLanguage {
    #[allow(missing_docs)] // documentation missing in model
    pub fn language_name(&self) -> ::std::option::Option<&str> {
        self.language_name.as_deref()
    }
}
impl ProgrammingLanguage {
    /// Creates a new builder-style object to manufacture [`ProgrammingLanguage`](crate::types::ProgrammingLanguage).
    pub fn builder() -> crate::types::builders::ProgrammingLanguageBuilder {
        crate::types::builders::ProgrammingLanguageBuilder::default()
    }
}

/// A builder for [`ProgrammingLanguage`](crate::types::ProgrammingLanguage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProgrammingLanguageBuilder {
    pub(crate) language_name: ::std::option::Option<::std::string::String>,
}
impl ProgrammingLanguageBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn language_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.language_name = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_language_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.language_name = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_language_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.language_name
    }
    /// Consumes the builder and constructs a [`ProgrammingLanguage`](crate::types::ProgrammingLanguage).
    pub fn build(self) -> crate::types::ProgrammingLanguage {
        crate::types::ProgrammingLanguage {
            language_name: self.language_name,
        }
    }
}
