// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3Reference {
    #[allow(missing_docs)] // documentation missing in model
    pub uri: ::std::option::Option<::std::string::String>,
}
impl S3Reference {
    #[allow(missing_docs)] // documentation missing in model
    pub fn uri(&self) -> ::std::option::Option<&str> {
        self.uri.as_deref()
    }
}
impl S3Reference {
    /// Creates a new builder-style object to manufacture [`S3Reference`](crate::types::S3Reference).
    pub fn builder() -> crate::types::builders::S3ReferenceBuilder {
        crate::types::builders::S3ReferenceBuilder::default()
    }
}

/// A builder for [`S3Reference`](crate::types::S3Reference).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3ReferenceBuilder {
    pub(crate) uri: ::std::option::Option<::std::string::String>,
}
impl S3ReferenceBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uri = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uri = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.uri
    }
    /// Consumes the builder and constructs a [`S3Reference`](crate::types::S3Reference).
    pub fn build(self) -> crate::types::S3Reference {
        crate::types::S3Reference { uri: self.uri }
    }
}
