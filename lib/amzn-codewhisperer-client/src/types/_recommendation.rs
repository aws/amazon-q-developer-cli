// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Recommendation {
    #[allow(missing_docs)] // documentation missing in model
    pub content: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub references: ::std::option::Option<::std::vec::Vec<crate::types::Reference>>,
    #[allow(missing_docs)] // documentation missing in model
    pub most_relevant_missing_imports: ::std::option::Option<::std::vec::Vec<crate::types::Import>>,
}
impl Recommendation {
    #[allow(missing_docs)] // documentation missing in model
    pub fn content(&self) -> ::std::option::Option<&str> {
        self.content.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn references(&self) -> ::std::option::Option<&[crate::types::Reference]> {
        self.references.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn most_relevant_missing_imports(&self) -> ::std::option::Option<&[crate::types::Import]> {
        self.most_relevant_missing_imports.as_deref()
    }
}
impl ::std::fmt::Debug for Recommendation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Recommendation");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("references", &self.references);
        formatter.field("most_relevant_missing_imports", &self.most_relevant_missing_imports);
        formatter.finish()
    }
}
impl Recommendation {
    /// Creates a new builder-style object to manufacture
    /// [`Recommendation`](crate::types::Recommendation).
    pub fn builder() -> crate::types::builders::RecommendationBuilder {
        crate::types::builders::RecommendationBuilder::default()
    }
}

/// A builder for [`Recommendation`](crate::types::Recommendation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct RecommendationBuilder {
    pub(crate) content: ::std::option::Option<::std::string::String>,
    pub(crate) references: ::std::option::Option<::std::vec::Vec<crate::types::Reference>>,
    pub(crate) most_relevant_missing_imports: ::std::option::Option<::std::vec::Vec<crate::types::Import>>,
}
impl RecommendationBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.content
    }

    /// Appends an item to `references`.
    ///
    /// To override the contents of this collection use [`set_references`](Self::set_references).
    pub fn references(mut self, input: crate::types::Reference) -> Self {
        let mut v = self.references.unwrap_or_default();
        v.push(input);
        self.references = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_references(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Reference>>) -> Self {
        self.references = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_references(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Reference>> {
        &self.references
    }

    /// Appends an item to `most_relevant_missing_imports`.
    ///
    /// To override the contents of this collection use
    /// [`set_most_relevant_missing_imports`](Self::set_most_relevant_missing_imports).
    pub fn most_relevant_missing_imports(mut self, input: crate::types::Import) -> Self {
        let mut v = self.most_relevant_missing_imports.unwrap_or_default();
        v.push(input);
        self.most_relevant_missing_imports = ::std::option::Option::Some(v);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_most_relevant_missing_imports(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::Import>>,
    ) -> Self {
        self.most_relevant_missing_imports = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_most_relevant_missing_imports(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Import>> {
        &self.most_relevant_missing_imports
    }

    /// Consumes the builder and constructs a [`Recommendation`](crate::types::Recommendation).
    pub fn build(self) -> crate::types::Recommendation {
        crate::types::Recommendation {
            content: self.content,
            references: self.references,
            most_relevant_missing_imports: self.most_relevant_missing_imports,
        }
    }
}
impl ::std::fmt::Debug for RecommendationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RecommendationBuilder");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("references", &self.references);
        formatter.field("most_relevant_missing_imports", &self.most_relevant_missing_imports);
        formatter.finish()
    }
}
