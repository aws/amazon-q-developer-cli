// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Reference {
    #[allow(missing_docs)] // documentation missing in model
    pub license_name: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub repository: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub url: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub recommendation_content_span: ::std::option::Option<crate::types::Span>,
}
impl Reference {
    #[allow(missing_docs)] // documentation missing in model
    pub fn license_name(&self) -> ::std::option::Option<&str> {
        self.license_name.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn repository(&self) -> ::std::option::Option<&str> {
        self.repository.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn recommendation_content_span(&self) -> ::std::option::Option<&crate::types::Span> {
        self.recommendation_content_span.as_ref()
    }
}
impl Reference {
    /// Creates a new builder-style object to manufacture [`Reference`](crate::types::Reference).
    pub fn builder() -> crate::types::builders::ReferenceBuilder {
        crate::types::builders::ReferenceBuilder::default()
    }
}

/// A builder for [`Reference`](crate::types::Reference).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReferenceBuilder {
    pub(crate) license_name: ::std::option::Option<::std::string::String>,
    pub(crate) repository: ::std::option::Option<::std::string::String>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) recommendation_content_span: ::std::option::Option<crate::types::Span>,
}
impl ReferenceBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn license_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.license_name = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_license_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.license_name = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_license_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.license_name
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn repository(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_repository(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_repository(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn recommendation_content_span(mut self, input: crate::types::Span) -> Self {
        self.recommendation_content_span = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_recommendation_content_span(mut self, input: ::std::option::Option<crate::types::Span>) -> Self {
        self.recommendation_content_span = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_recommendation_content_span(&self) -> &::std::option::Option<crate::types::Span> {
        &self.recommendation_content_span
    }
    /// Consumes the builder and constructs a [`Reference`](crate::types::Reference).
    pub fn build(self) -> crate::types::Reference {
        crate::types::Reference {
            license_name: self.license_name,
            repository: self.repository,
            url: self.url,
            recommendation_content_span: self.recommendation_content_span,
        }
    }
}
