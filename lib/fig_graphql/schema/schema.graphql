# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input CommandFieldsCreateInput {
  description: String
  displayName: String
  icon: String
  name: String!

  """Create a new script associated with this command"""
  script: ScriptFieldsInput
  scriptUUID: ID
}

input CommandFieldsUpdateInput {
  description: String
  displayName: String
  icon: String
  name: String
  scriptUUID: ID
}

type CommandlineTool {
  flattenedCommands: [ICLICommand!]!
  root: ICLICommand!
}

input CreateCommandInput {
  fields: CommandFieldsCreateInput!
  namespace: String!
  parentUUID: ID
}

input CreateScriptInput {
  name: String!
  namespace: String!
  script: ScriptFieldsInput
}

input CreateScriptInvocationInput {
  commandStderr: String
  commandStdout: String
  ctrlC: Boolean
  executionDuration: UnsignedInt
  executionStartTime: DateTime
  exitCode: Int
  inputs: JSONObject

  """The name of the script"""
  name: String!

  """The name of the script's namespace"""
  namespace: String!
  runtimeVersion: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DeleteCommandInput {
  namespace: String!
  uuid: ID!
}

input DeleteScriptInput {
  name: String!
  namespace: String!
}

input DeleteTeamDomainInput {
  """The domain to delete"""
  domain: String!
  teamNamespace: String!
}

input DuplicateScriptInput {
  newName: String
  newNamespace: String
  oldName: String!
  oldNamespace: String!
}

type GithubOrg {
  avatarUrl: String!
  name: String!
  url: String!
  users: [GithubUser!]!
}

"""Publicly available information about a GitHub user"""
type GithubUser {
  avatarUrl: String!
  email: String
  name: String
  url: String!
  username: String!
}

interface ICLICommand {
  description: String
  displayName: String

  """The 'args' array to invoken this command."""
  executionPath: [String!]!
  icon: String
  name: String!
  parent: ICLICommand
  uuid: ID!
}

interface IScriptAstNode {
  type: String!
}

interface IScriptStep {
  name: String
  type: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JoinTeamInput {
  """
  Invite code to join a team [note: this uniquely identifies the team to join]
  """
  inviteCode: String

  """
  The namespace of team to join [note: used to join teams with domain policy]
  """
  teamNamespace: String
}

type JoinTeamResponse {
  """Indicate whether the user was able to join the team"""
  success: Boolean
}

type JoinableTeam {
  namespace: String!

  """Number of people on the team"""
  numberOfMembers: Int
}

type Mutation {
  createCommandMutation(input: CreateCommandInput!): ICLICommand!
  createScriptInvocationMutation(input: CreateScriptInvocationInput!): ScriptInvocation!
  createScriptMutation(input: CreateScriptInput!): Script!
  deleteCommandMutation(input: DeleteCommandInput!): ICLICommand!
  deleteScriptMutation(input: DeleteScriptInput!): Script!
  deleteTeamDomainMutation(input: DeleteTeamDomainInput!): TeamDomainVerificationStatus!

  """Duplicate a script within a single namespace or between namespaces"""
  duplicateScriptMutation(input: DuplicateScriptInput!): Script!
  joinTeamMutation(input: JoinTeamInput!): JoinTeamResponse!
  renameScriptMutation(input: RenameScriptInput!): Script!
  reorderCommandMutation(input: ReorderCommandInput!): ICLICommand!
  requestTeamDomainVerificationMutation(input: RequestTeamDomainVerificationInput!): TeamDomainVerificationStatus!
  updateCommandMutation(input: UpdateCommandInput!): ICLICommand!
  updateScriptMutation(input: UpdateScriptInput!): Script!
}

type Namespace {
  commandlineTool(name: String!): CommandlineTool
  commandlineTools: [CommandlineTool!]!
  createdAt: DateTime!
  script(name: String!): Script
  scripts(where: ScriptWhereInput): [Script!]!
  team: Team
  updatedAt: DateTime!
  user: User
  username: String!
}

type NestedCommand implements ICLICommand {
  description: String
  displayName: String

  """The 'args' array to invoken this command."""
  executionPath: [String!]!
  icon: String
  name: String!
  parent: ICLICommand
  subcommands: [ICLICommand!]!
  uuid: ID!
}

"""A user that only has publicly available information"""
type OtherUser {
  githubUser: GithubUser
  username: String
}

type Plugin {
  authorNames: [String!]!
  authors: [JSON!]!
  categories: [String!]!
  createdAt: DateTime!
  description: String
  displayName: String
  downloads: Int!
  forks: String
  githubOwner: String
  githubReadme: String
  githubRef: String
  githubRepo: String
  hidden: Boolean
  icon: String
  keywords: [String!]!
  license: [String!]!
  name: String!
  noteworthy: Boolean!
  pushedAt: DateTime
  raw: JSON!
  readme: String
  shells: [String!]!
  stargazers: Int
  updatedAt: DateTime!
  verified: Boolean!
}

input PluginWhereInput {
  name: String
}

input PluginWhereUniqueInput {
  name: String!
}

type Query {
  """Current user"""
  currentNamespace: Namespace!

  """Current user"""
  currentUser: User

  """Find a namespace"""
  namespace(username: String!): Namespace
  plugin(where: PluginWhereUniqueInput!): Plugin
  plugins(where: PluginWhereInput): [Plugin!]!

  """Get public scripts"""
  publicScripts: [Script!]!

  """Get a script by namespace and name"""
  script(name: String!, namespace: String!): Script
}

input RenameScriptInput {
  namespace: String!
  newName: String!
  oldName: String!
}

input ReorderCommandInput {
  destinationUUID: ID!
  namespace: String!
  uuid: ID!
}

input RequestTeamDomainVerificationInput {
  teamNamespace: String!

  """
  The email used to verify a domain. Use user's primary email, if undefined 
  """
  verificationEmail: String
}

type Script {
  astTree: [IScriptAstNode!]! @deprecated(reason: "Use steps with codeBlockData instead.")
  command: ScriptCommand
  createdAt: DateTime!
  createdBy: OtherUser
  fields: ScriptFields!
  invocations: [ScriptInvocation!]!
  isOwnedByCurrentUser: Boolean!
  lastInvokedAt: DateTime
  lastInvokedAtByUser: DateTime

  """CLI tools this Script is included in"""
  linkedCommandlineTools: [ICLICommand!]!
  name: String!
  namespace: Namespace
  namespaceName: String
  relevanceScore: Float!
  totalInvocations: Int!
  updatedAt: DateTime!
  uuid: ID!
}

type ScriptAstParameter implements IScriptAstNode {
  name: String!
  type: String!
}

type ScriptAstText implements IScriptAstNode {
  text: String!
  type: String!
}

type ScriptCheckboxParameter {
  falseValueSubstitution: String
  trueValueSubstitution: String
}

input ScriptCheckboxParameterInput {
  falseValueSubstitution: String
  trueValueSubstitution: String
}

type ScriptCodeBlockData {
  runtime: ScriptRuntime
  text: String
}

input ScriptCodeBlockDataInput {
  runtime: ScriptRuntime
  text: String
}

type ScriptCodeBlockStep implements IScriptStep {
  astTree: [IScriptAstNode!]
  codeBlockData: ScriptCodeBlockData
  name: String
  type: String!
}

type ScriptCommand implements ICLICommand {
  description: String
  displayName: String

  """The 'args' array to invoken this command."""
  executionPath: [String!]!
  icon: String
  name: String!
  parent: ICLICommand
  script: Script!
  uuid: ID!
}

type ScriptFields {
  description: String
  displayName: String
  editableSteps: [ScriptStep!]
  icon: String
  invocationCollection: ScriptInvocationCollection
  isProtected: Boolean
  name: String
  parameters: [ScriptParameter!] @deprecated(reason: "Use steps with parameters instead.")
  public: Boolean
  rules: [[ScriptRule!]!] @deprecated(reason: "Limited support for nested arrays in InputTypes.(See: https://github.com/MichalLytek/type-graphql/issues/734) Use ruleset instead.")

  """A collection of rulesets that must all be true for execution to occur"""
  ruleset: [ScriptRuleset!]
  runtime: ScriptRuntime @deprecated(reason: "Use steps with codeBlockData instead.")
  steps: [IScriptStep!]
  tags: [String!]
  templateRaw: String @deprecated(reason: "Use steps with codeBlockData instead.")
  templateVersion: Int
}

input ScriptFieldsInput {
  description: String
  displayName: String
  editableSteps: [ScriptStepInput!]
  icon: String
  invocationCollection: ScriptInvocationCollectionInput
  isProtected: Boolean
  name: String
  parameters: [ScriptParameterInput!]
  public: Boolean = false
  rules: [[ScriptRuleInput!]!]

  """A collection of rulesets that must all be true for execution to occur"""
  ruleset: [ScriptRulesetInput!]
  runtime: ScriptRuntime
  tags: [String!]
  templateRaw: String
  templateVersion: Int
}

enum ScriptFileType {
  Any
  FileOnly
  FolderOnly
}

type ScriptGenerator {
  named: ScriptNamedGenerator
  shellScript: ScriptShellScriptGenerator
  type: ScriptGeneratorType!
}

input ScriptGeneratorInput {
  named: ScriptNamedGeneratorInput
  shellScript: ScriptShellScriptGeneratorInput
  type: ScriptGeneratorType!
}

enum ScriptGeneratorType {
  Named
  ShellScript
}

type ScriptInputsStep implements IScriptStep {
  name: String
  parameters: [ScriptParameter!]
  type: String!
}

type ScriptInvocation {
  commandStdout: String
  ctrlC: Boolean
  executionDuration: BigInt
  executionStartTime: DateTime
  exitCode: Float
  inputs: JSONObject
  runtimeVersion: String
  script: Script!
  standardError: String
  updatedAt: DateTime!
  user: OtherUser
}

type ScriptInvocationCollection {
  disabled: Boolean
  inputs: Boolean
  stderr: Boolean
  stdout: Boolean
}

input ScriptInvocationCollectionInput {
  disabled: Boolean
  inputs: Boolean
  stderr: Boolean
  stdout: Boolean
}

type ScriptNamedGenerator {
  name: String!
}

input ScriptNamedGeneratorInput {
  name: String!
}

type ScriptParameter {
  checkbox: ScriptCheckboxParameter

  """
  Use this as reference when parsing arguments on commandline. Mirrors the clap Arg interface. 
  """
  commandlineInterface: ScriptParameterCommandlineInterface
  description: String
  displayName: String

  """
  Commandline properties that are directly configurable by end user. Do NOT use these values directly for parsing arguments! Use `commandlineInterface` instead.
  """
  editableCommandlineInterface: ScriptParameterEditableCommandlineInterface
  name: String!
  path: ScriptPathParameter

  """Whether or not this parameter is required to submit the form"""
  required: Boolean
  selector: ScriptSelectorParameter
  text: ScriptTextParameter
  type: ScriptParameterType!
}

type ScriptParameterCommandlineInterface {
  long: String

  """
  Consume all following arguments. Do not be parse them individually, but rather pass them in entirety.
  """
  raw: Boolean
  requireEquals: Boolean
  required: Boolean
  short: String
  type: ScriptParameterCommandlineInterfaceType
}

type ScriptParameterCommandlineInterfaceBoolean {
  default: Boolean
  type: String!
}

type ScriptParameterCommandlineInterfaceString {
  default: String
  type: String!
}

union ScriptParameterCommandlineInterfaceType = ScriptParameterCommandlineInterfaceBoolean | ScriptParameterCommandlineInterfaceString

type ScriptParameterEditableCommandlineInterface {
  """
  Is this parameter specified implicitly based on position in the command line. eg. git push <remote> <branch>
  """
  isPositional: Boolean
  long: String
  requireEquals: Boolean
  short: String
}

input ScriptParameterEditableCommandlineInterfaceInput {
  """
  Is this parameter specified implicitly based on position in the command line. eg. git push <remote> <branch>
  """
  isPositional: Boolean
  long: String
  requireEquals: Boolean
  short: String
}

input ScriptParameterInput {
  checkbox: ScriptCheckboxParameterInput
  description: String
  displayName: String

  """
  Commandline properties that are directly configurable by end user. Do NOT use these values directly for parsing arguments! Use `commandlineInterface` instead.
  """
  editableCommandlineInterface: ScriptParameterEditableCommandlineInterfaceInput
  name: String!
  path: ScriptPathParameterInput

  """Whether or not this parameter is required to submit the form"""
  required: Boolean
  selector: ScriptSelectorParameterInput
  text: ScriptTextParameterInput
  type: ScriptParameterType!
}

enum ScriptParameterType {
  Checkbox
  Path
  Selector
  Text
}

type ScriptPathParameter {
  extensions: [String!]
  fileType: ScriptFileType
}

input ScriptPathParameterInput {
  extensions: [String!]
  fileType: ScriptFileType
}

type ScriptRule {
  inverted: Boolean!
  key: ScriptRuleKey!
  predicate: ScriptRulePredicate!
  specifier: String
  value: String
}

input ScriptRuleInput {
  inverted: Boolean!
  key: ScriptRuleKey!
  predicate: ScriptRulePredicate!
  specifier: String
  value: String
}

enum ScriptRuleKey {
  ContentsOfDirectory
  CurrentBranch
  EnvironmentVariable
  GitRemote
  GitRootDirectory
  WorkingDirectory
}

enum ScriptRulePredicate {
  Contains
  EndsWith
  Equals
  Exists
  Matches
  StartsWith
}

type ScriptRuleset {
  """Collection of rules that are logical or'd together"""
  or: [ScriptRule!]
}

input ScriptRulesetInput {
  """Collection of rules that are logical or'd together"""
  or: [ScriptRuleInput!]
}

enum ScriptRuntime {
  BASH
  DENO
  NODE
  PYTHON
}

type ScriptSelectorParameter {
  """Allow raw text to be chosen as the selection"""
  allowRawTextInput: Boolean
  generators: [ScriptGenerator!]

  """Whether this component can accept multiple selections"""
  multi: Boolean
  placeholder: String
  suggestions: [String!]
}

input ScriptSelectorParameterInput {
  """Allow raw text to be chosen as the selection"""
  allowRawTextInput: Boolean
  generators: [ScriptGeneratorInput!]

  """Whether this component can accept multiple selections"""
  multi: Boolean
  placeholder: String
  suggestions: [String!]
}

type ScriptShellScriptGenerator {
  astTree: [IScriptAstNode!]
  script: String!
}

input ScriptShellScriptGeneratorInput {
  script: String!
}

type ScriptStep {
  codeBlockData: ScriptCodeBlockData
  name: String
  parameters: [ScriptParameter!]
  type: ScriptStepType
}

input ScriptStepInput {
  codeBlockData: ScriptCodeBlockDataInput
  name: String
  parameters: [ScriptParameterInput!]
  type: ScriptStepType
}

enum ScriptStepType {
  CODE_BLOCK
  INPUTS
}

type ScriptTextParameter {
  placeholder: String
}

input ScriptTextParameterInput {
  placeholder: String
}

input ScriptWhereInput {
  name: StringFilter
  tag: StringNullableListFilter
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

type Team {
  """
  Domains that are linked to a team. Users with emails that match the domains can sign in automatically
  """
  allowedDomains: [TeamAllowedDomain!]
  createdAt: DateTime!
  namespace: Namespace
  teamMemberships: [TeamMembership!]
  updatedAt: DateTime!
}

type TeamAllowedDomain {
  domain: String!
  status: TeamAllowedDomainStatus!
  verificationEmail: String
  verifiedAt: DateTime
}

enum TeamAllowedDomainStatus {
  PENDING
  REMOVED
  VERIFIED
}

type TeamDomainVerificationStatus {
  domain: TeamAllowedDomain
  namespace: String
}

type TeamMembership {
  createdAt: DateTime!
  role: TeamRole!
  team: Team!
  updatedAt: DateTime!
  user: TeamUser!
}

enum TeamRole {
  ADMIN
  MEMBER
  OWNER
}

"""A user that is on a team with the current user"""
type TeamUser {
  githubUser: GithubUser
  primaryEmail: String!
  username: String
}

"""Integers that will have a value of 0 or more."""
scalar UnsignedInt

input UpdateCommandInput {
  fields: CommandFieldsUpdateInput!
  namespace: String!
  uuid: ID!
}

input UpdateScriptInput {
  name: String!
  namespace: String!
  script: ScriptFieldsInput!
}

type User {
  createdAt: DateTime!
  dotfilesEarlyAccess: Boolean!
  firstName: String
  fullName: String
  githubOrgs: [GithubOrg!]!
  githubUser: GithubUser
  hasSeenOnboarding: Boolean!

  """
  Teams that a user can be joined based on the domain of their primary email
  """
  joinableTeams: [JoinableTeam!]
  lastName: String
  namespace: Namespace
  onboardingsViewed: JSON!
  primaryEmail: String!
  settings: JSONObject!
  teamMemberships: [TeamMembership!]
  updatedAt: DateTime!
}
