// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CodeCoverageEvent {
    #[allow(missing_docs)] // documentation missing in model
    pub customization_arn: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub programming_language: ::std::option::Option<crate::types::ProgrammingLanguage>,
    #[allow(missing_docs)] // documentation missing in model
    pub accepted_character_count: i32,
    #[allow(missing_docs)] // documentation missing in model
    pub total_character_count: i32,
    #[allow(missing_docs)] // documentation missing in model
    pub timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl CodeCoverageEvent {
    #[allow(missing_docs)] // documentation missing in model
    pub fn customization_arn(&self) -> ::std::option::Option<&str> {
        self.customization_arn.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn programming_language(&self) -> ::std::option::Option<&crate::types::ProgrammingLanguage> {
        self.programming_language.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn accepted_character_count(&self) -> i32 {
        self.accepted_character_count
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn total_character_count(&self) -> i32 {
        self.total_character_count
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
}
impl ::std::fmt::Debug for CodeCoverageEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CodeCoverageEvent");
        formatter.field("customization_arn", &self.customization_arn);
        formatter.field("programming_language", &self.programming_language);
        formatter.field("accepted_character_count", &"*** Sensitive Data Redacted ***");
        formatter.field("total_character_count", &"*** Sensitive Data Redacted ***");
        formatter.field("timestamp", &self.timestamp);
        formatter.finish()
    }
}
impl CodeCoverageEvent {
    /// Creates a new builder-style object to manufacture
    /// [`CodeCoverageEvent`](crate::types::CodeCoverageEvent).
    pub fn builder() -> crate::types::builders::CodeCoverageEventBuilder {
        crate::types::builders::CodeCoverageEventBuilder::default()
    }
}

/// A builder for [`CodeCoverageEvent`](crate::types::CodeCoverageEvent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CodeCoverageEventBuilder {
    pub(crate) customization_arn: ::std::option::Option<::std::string::String>,
    pub(crate) programming_language: ::std::option::Option<crate::types::ProgrammingLanguage>,
    pub(crate) accepted_character_count: ::std::option::Option<i32>,
    pub(crate) total_character_count: ::std::option::Option<i32>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl CodeCoverageEventBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn customization_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customization_arn = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_customization_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customization_arn = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_customization_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.customization_arn
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn programming_language(mut self, input: crate::types::ProgrammingLanguage) -> Self {
        self.programming_language = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_programming_language(mut self, input: ::std::option::Option<crate::types::ProgrammingLanguage>) -> Self {
        self.programming_language = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_programming_language(&self) -> &::std::option::Option<crate::types::ProgrammingLanguage> {
        &self.programming_language
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn accepted_character_count(mut self, input: i32) -> Self {
        self.accepted_character_count = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_accepted_character_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.accepted_character_count = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_accepted_character_count(&self) -> &::std::option::Option<i32> {
        &self.accepted_character_count
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn total_character_count(mut self, input: i32) -> Self {
        self.total_character_count = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_total_character_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_character_count = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_total_character_count(&self) -> &::std::option::Option<i32> {
        &self.total_character_count
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }

    /// Consumes the builder and constructs a
    /// [`CodeCoverageEvent`](crate::types::CodeCoverageEvent).
    pub fn build(self) -> crate::types::CodeCoverageEvent {
        crate::types::CodeCoverageEvent {
            customization_arn: self.customization_arn,
            programming_language: self.programming_language,
            accepted_character_count: self.accepted_character_count.unwrap_or_default(),
            total_character_count: self.total_character_count.unwrap_or_default(),
            timestamp: self.timestamp,
        }
    }
}
impl ::std::fmt::Debug for CodeCoverageEventBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CodeCoverageEventBuilder");
        formatter.field("customization_arn", &self.customization_arn);
        formatter.field("programming_language", &self.programming_language);
        formatter.field("accepted_character_count", &"*** Sensitive Data Redacted ***");
        formatter.field("total_character_count", &"*** Sensitive Data Redacted ***");
        formatter.field("timestamp", &self.timestamp);
        formatter.finish()
    }
}
