// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeScanEvent {
    #[allow(missing_docs)] // documentation missing in model
    pub programming_language: ::std::option::Option<crate::types::ProgrammingLanguage>,
    #[allow(missing_docs)] // documentation missing in model
    pub code_scan_job_id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl CodeScanEvent {
    #[allow(missing_docs)] // documentation missing in model
    pub fn programming_language(&self) -> ::std::option::Option<&crate::types::ProgrammingLanguage> {
        self.programming_language.as_ref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn code_scan_job_id(&self) -> ::std::option::Option<&str> {
        self.code_scan_job_id.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
}
impl CodeScanEvent {
    /// Creates a new builder-style object to manufacture
    /// [`CodeScanEvent`](crate::types::CodeScanEvent).
    pub fn builder() -> crate::types::builders::CodeScanEventBuilder {
        crate::types::builders::CodeScanEventBuilder::default()
    }
}

/// A builder for [`CodeScanEvent`](crate::types::CodeScanEvent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CodeScanEventBuilder {
    pub(crate) programming_language: ::std::option::Option<crate::types::ProgrammingLanguage>,
    pub(crate) code_scan_job_id: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl CodeScanEventBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn programming_language(mut self, input: crate::types::ProgrammingLanguage) -> Self {
        self.programming_language = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_programming_language(mut self, input: ::std::option::Option<crate::types::ProgrammingLanguage>) -> Self {
        self.programming_language = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_programming_language(&self) -> &::std::option::Option<crate::types::ProgrammingLanguage> {
        &self.programming_language
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn code_scan_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code_scan_job_id = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_code_scan_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code_scan_job_id = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_code_scan_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.code_scan_job_id
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }

    /// Consumes the builder and constructs a [`CodeScanEvent`](crate::types::CodeScanEvent).
    pub fn build(self) -> crate::types::CodeScanEvent {
        crate::types::CodeScanEvent {
            programming_language: self.programming_language,
            code_scan_job_id: self.code_scan_job_id,
            timestamp: self.timestamp,
        }
    }
}
