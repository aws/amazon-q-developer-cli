// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// This exception is thrown when the user does not have sufficient access to perform this
    /// action.
    AccessDeniedError(crate::types::error::AccessDeniedError),
    /// This exception is thrown when the action to perform could not be completed because the
    /// resource is in a conflicting state.
    ConflictError(crate::types::error::ConflictError),
    /// This exception is thrown when an unexpected error occurred during the processing of a
    /// request.
    InternalServerError(crate::types::error::InternalServerError),
    /// This exception is thrown when describing a resource that does not exist.
    ResourceNotFoundError(crate::types::error::ResourceNotFoundError),
    /// This exception is thrown when request was denied due to request throttling.
    ThrottlingError(crate::types::error::ThrottlingError),
    /// This exception is thrown when the input fails to satisfy the constraints specified by the
    /// service.
    ValidationError(crate::types::error::ValidationError),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error
    /// code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedError(inner) => inner.fmt(f),
            Error::ConflictError(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::ResourceNotFoundError(inner) => inner.fmt(f),
            Error::ThrottlingError(inner) => inner.fmt(f),
            Error::ValidationError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_http::result::SdkError<
            crate::operation::create_artifact_upload_url::CreateArtifactUploadUrlError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_http::result::SdkError<
            crate::operation::create_artifact_upload_url::CreateArtifactUploadUrlError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_artifact_upload_url::CreateArtifactUploadUrlError> for Error {
    fn from(err: crate::operation::create_artifact_upload_url::CreateArtifactUploadUrlError) -> Self {
        match err {
            crate::operation::create_artifact_upload_url::CreateArtifactUploadUrlError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::create_artifact_upload_url::CreateArtifactUploadUrlError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::create_artifact_upload_url::CreateArtifactUploadUrlError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::create_artifact_upload_url::CreateArtifactUploadUrlError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::create_artifact_upload_url::CreateArtifactUploadUrlError::Unhandled(inner) => {
                Error::Unhandled(inner)
            },
        }
    }
}
impl<R> From<::aws_smithy_http::result::SdkError<crate::operation::create_upload_url::CreateUploadUrlError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_http::result::SdkError<crate::operation::create_upload_url::CreateUploadUrlError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_upload_url::CreateUploadUrlError> for Error {
    fn from(err: crate::operation::create_upload_url::CreateUploadUrlError) -> Self {
        match err {
            crate::operation::create_upload_url::CreateUploadUrlError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::create_upload_url::CreateUploadUrlError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::create_upload_url::CreateUploadUrlError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::create_upload_url::CreateUploadUrlError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::create_upload_url::CreateUploadUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_http::result::SdkError<crate::operation::generate_completions::GenerateCompletionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_http::result::SdkError<crate::operation::generate_completions::GenerateCompletionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::generate_completions::GenerateCompletionsError> for Error {
    fn from(err: crate::operation::generate_completions::GenerateCompletionsError) -> Self {
        match err {
            crate::operation::generate_completions::GenerateCompletionsError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::generate_completions::GenerateCompletionsError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::generate_completions::GenerateCompletionsError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::generate_completions::GenerateCompletionsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::generate_completions::GenerateCompletionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            },
        }
    }
}
impl<R> From<::aws_smithy_http::result::SdkError<crate::operation::get_code_analysis::GetCodeAnalysisError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_http::result::SdkError<crate::operation::get_code_analysis::GetCodeAnalysisError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_code_analysis::GetCodeAnalysisError> for Error {
    fn from(err: crate::operation::get_code_analysis::GetCodeAnalysisError) -> Self {
        match err {
            crate::operation::get_code_analysis::GetCodeAnalysisError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::get_code_analysis::GetCodeAnalysisError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::get_code_analysis::GetCodeAnalysisError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            },
            crate::operation::get_code_analysis::GetCodeAnalysisError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::get_code_analysis::GetCodeAnalysisError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::get_code_analysis::GetCodeAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_http::result::SdkError<
            crate::operation::list_available_customizations::ListAvailableCustomizationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_http::result::SdkError<
            crate::operation::list_available_customizations::ListAvailableCustomizationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_available_customizations::ListAvailableCustomizationsError> for Error {
    fn from(err: crate::operation::list_available_customizations::ListAvailableCustomizationsError) -> Self {
        match err {
            crate::operation::list_available_customizations::ListAvailableCustomizationsError::ValidationError(
                inner,
            ) => Error::ValidationError(inner),
            crate::operation::list_available_customizations::ListAvailableCustomizationsError::AccessDeniedError(
                inner,
            ) => Error::AccessDeniedError(inner),
            crate::operation::list_available_customizations::ListAvailableCustomizationsError::InternalServerError(
                inner,
            ) => Error::InternalServerError(inner),
            crate::operation::list_available_customizations::ListAvailableCustomizationsError::ThrottlingError(
                inner,
            ) => Error::ThrottlingError(inner),
            crate::operation::list_available_customizations::ListAvailableCustomizationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            },
        }
    }
}
impl<R>
    From<
        ::aws_smithy_http::result::SdkError<
            crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_http::result::SdkError<
            crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsError> for Error {
    fn from(err: crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsError) -> Self {
        match err {
            crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsError::InternalServerError(
                inner,
            ) => Error::InternalServerError(inner),
            crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsError::ResourceNotFoundError(
                inner,
            ) => Error::ResourceNotFoundError(inner),
            crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::list_code_analysis_findings::ListCodeAnalysisFindingsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            },
        }
    }
}
impl<R> From<::aws_smithy_http::result::SdkError<crate::operation::send_telemetry_event::SendTelemetryEventError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_http::result::SdkError<crate::operation::send_telemetry_event::SendTelemetryEventError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_telemetry_event::SendTelemetryEventError> for Error {
    fn from(err: crate::operation::send_telemetry_event::SendTelemetryEventError) -> Self {
        match err {
            crate::operation::send_telemetry_event::SendTelemetryEventError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::send_telemetry_event::SendTelemetryEventError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::send_telemetry_event::SendTelemetryEventError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::send_telemetry_event::SendTelemetryEventError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::send_telemetry_event::SendTelemetryEventError::Unhandled(inner) => {
                Error::Unhandled(inner)
            },
        }
    }
}
impl<R> From<::aws_smithy_http::result::SdkError<crate::operation::start_code_analysis::StartCodeAnalysisError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_http::result::SdkError<crate::operation::start_code_analysis::StartCodeAnalysisError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_code_analysis::StartCodeAnalysisError> for Error {
    fn from(err: crate::operation::start_code_analysis::StartCodeAnalysisError) -> Self {
        match err {
            crate::operation::start_code_analysis::StartCodeAnalysisError::ConflictError(inner) => {
                Error::ConflictError(inner)
            },
            crate::operation::start_code_analysis::StartCodeAnalysisError::ValidationError(inner) => {
                Error::ValidationError(inner)
            },
            crate::operation::start_code_analysis::StartCodeAnalysisError::AccessDeniedError(inner) => {
                Error::AccessDeniedError(inner)
            },
            crate::operation::start_code_analysis::StartCodeAnalysisError::ThrottlingError(inner) => {
                Error::ThrottlingError(inner)
            },
            crate::operation::start_code_analysis::StartCodeAnalysisError::ResourceNotFoundError(inner) => {
                Error::ResourceNotFoundError(inner)
            },
            crate::operation::start_code_analysis::StartCodeAnalysisError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            },
            crate::operation::start_code_analysis::StartCodeAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedError(inner) => inner.source(),
            Error::ConflictError(inner) => inner.source(),
            Error::InternalServerError(inner) => inner.source(),
            Error::ResourceNotFoundError(inner) => inner.source(),
            Error::ThrottlingError(inner) => inner.source(),
            Error::ValidationError(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedError(e) => e.request_id(),
            Self::ConflictError(e) => e.request_id(),
            Self::InternalServerError(e) => e.request_id(),
            Self::ResourceNotFoundError(e) => e.request_id(),
            Self::ThrottlingError(e) => e.request_id(),
            Self::ValidationError(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
