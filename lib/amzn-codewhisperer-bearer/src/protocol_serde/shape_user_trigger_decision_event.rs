// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_user_trigger_decision_event(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::UserTriggerDecisionEvent,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.session_id {
        object.key("sessionId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.request_id {
        object.key("requestId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.customization_arn {
        object.key("customizationArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.programming_language {
        #[allow(unused_mut)]
        let mut object_5 = object.key("programmingLanguage").start_object();
        crate::protocol_serde::shape_programming_language::ser_programming_language(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.completion_type {
        object.key("completionType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.suggestion_state {
        object.key("suggestionState").string(var_7.as_str());
    }
    {
        object.key("recommendationLatencyMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((input.recommendation_latency_milliseconds).into()),
        );
    }
    if let Some(var_8) = &input.timestamp {
        object
            .key("timestamp")
            .date_time(var_8, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if input.suggestion_reference_count != 0 {
        object.key("suggestionReferenceCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.suggestion_reference_count).into()),
        );
    }
    if input.generated_line != 0 {
        object.key("generatedLine").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.generated_line).into()),
        );
    }
    Ok(())
}
