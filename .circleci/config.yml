version: 2.1

orbs:
  rust: circleci/rust@1.6.0
  win: circleci/windows@5.0.0

parameters:
  version:
    type: string
    default: ""
  changelog:
    type: string
    default: ""
  callback_url:
    type: string
    default: ""
  id:
    type: string
    default: ""
  checkout:
    type: string
    default: ""
  compat:
    type: boolean
    default: true
  build_targets:
    type: string
    default: "macos"

workflows:
  version: 2
  build:
    when:
      equal: [<< pipeline.trigger_source >>, api]
    jobs:
      - update-version

      - macos:
          requires: [update-version]
          context:
            - macos-signing
            - github
      - windows:
          requires: [update-version]
      - linux-headless-x86_64:
          requires: [update-version]
      - linux-headless-aarch64:
          requires: [update-version]
      - linux-desktop-x86_64:
          requires: [update-version]

      - package-tarball:
          requires:
            - linux-desktop-x86_64
            - linux-headless-aarch64
            - linux-headless-x86_64
          context:
            - github
      - package-rpm:
          requires:
            - linux-desktop-x86_64
            - linux-headless-aarch64
            - linux-headless-x86_64
          context:
            - github
      - package-deb:
          requires:
            - linux-desktop-x86_64
            - linux-headless-aarch64
            - linux-headless-x86_64
          context:
            - github
      
      - publish-packages:
          requires: [package-tarball, package-deb, package-rpm, windows, macos]
          context:
            - fig
            - github

      - sentry:
          requires: [package-tarball, package-deb, package-rpm, windows, macos]
          context:
            - sentry
  noop:
    when:
      not:
        equal: [<< pipeline.trigger_source >>, api]
    jobs:
      - noop

jobs:
  # Creates tag on specified revision
  update-version:
    docker:
      - image: ubuntu:22.04
    resource_class: small
    steps:
      - require:
          condition: << pipeline.parameters.compat >>
      - configure-apt
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y curl git jq python3-pip
            python3 -m pip install semver
      - rust/install:
          version: 1.65.0
      - checkout-desktop:
          version_update: true
      - run:
          name: Resolve relative version
          command: |
            LAST_VERSION=`sed -nr 's/^version[[:space:]]*=[[:space:]]*\"([^"]*)\"/\1/p' desktop/Cargo.toml | head -1`
            PIPELINE_VERSION=<< pipeline.parameters.version >>
            echo $PIPELINE_VERSION > version
            if [[ $PIPELINE_VERSION == "major" ]] || [[ $PIPELINE_VERSION == "minor" ]] || [[ $PIPELINE_VERSION == "patch" ]]; then
              echo "import sys, semver
            ver = semver.VersionInfo.parse(sys.argv[1])
            match sys.argv[2]:
              case 'major':
                ver = ver.bump_major()
              case 'minor':
                ver = ver.bump_minor()
              case 'patch':
                ver = ver.bump_patch()
            print(str(ver))" > version_bump.py
              python3 version_bump.py $LAST_VERSION $PIPELINE_VERSION > version
            fi
            curl -X POST << pipeline.parameters.callback_url >> -d "version;$(cat version)"
      - run:
          name: Update versions
          command: |
            NEW_VERSION=`cat version`
            cd desktop
            # sed -i "0,/^version = \"[^\"]*\"\$/s//version = \"$NEW_VERSION\"/" Cargo.toml
            # sed -i "s/Version=\"[^\"]*\"/Version=\"$NEW_VERSION\"/" fig.wxi
      - run:
          name: Update lockfile
          command: cd desktop && cargo update -p fig_desktop
      - run:
          name: Push tagged release
          command: |
            NEW_VERSION=`cat version`
            GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"
            cd desktop
            git config user.name 'fig-deploy[bot]'
            git config user.email '109307685+fig-deploy[bot]@users.noreply.github.com'
            git add Cargo.lock
            git add Cargo.toml
            git add fig.wxi
            git checkout -B build-<< pipeline.parameters.id >>
            printf "Version $NEW_VERSION [skip-ci] [skip ci]\n\n<< pipeline.parameters.changelog >>" > commit_message
            git commit --allow-empty --file commit_message
            git push  --set-upstream origin build-<< pipeline.parameters.id >>
            git tag --annotate --force --message "<< pipeline.parameters.changelog >>" $NEW_VERSION
            git push --tags --force
            COMMIT_HASH=`git log -n 1 --pretty=format:"%H"`
            curl -X POST << pipeline.parameters.callback_url >> -d "commit;$COMMIT_HASH"

  windows:
    environment:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    executor:
      name: win/server-2022
      size: large
      shell: bash.exe
    steps:
      - require-target:
          platform: windows
      - run:
          name: Install dependencies
          command: |
            curl https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe -o rustup-init.exe
            ./rustup-init.exe -y --profile minimal --default-host x86_64-pc-windows-msvc --default-toolchain stable
            PATH="$PATH:$HOME/.cargo/bin"

            choco install protoc -y

            choco install wixtoolset -y
            PATH="$PATH:/c/Program Files (x86)/WiX Toolset v3.11/bin"

            echo "export PATH=\"$PATH\"" >> $BASH_ENV
      - checkout-desktop
      - run:
          name: Build and bundle
          command: |
            cd desktop
            ./bundle.bat
      - store_artifacts:
          path: desktop/target/wix/fig_installer.exe
          destination: pkg/os=windows,arch=x86_64,kind=exe
      - run:
          name: Move EXE
          command: |
            DIR="/tmp/new/pkg/windows/x86_64/exe/windows_installer/"
            mkdir -p $DIR
            mv desktop/fig.exe $DIR/pkg
      - persist_to_workspace:
          root: /tmp/new
          paths:
            - pkg/x86_64/exe/windows_installer/pkg

  linux-headless-x86_64:
    docker:
      - image: messense/rust-musl-cross:x86_64-musl
    resource_class: large
    steps:
      - require-target:
          platform: linux
      - prepare-build:
          arch: x86_64
          include_desktop_deps: false
          install_rust: false
      - run:
          name: Install musl stuff
          command: apt install -y musl-dev
      - run:
          name: Install Rust toolchain
          command: rustup target add x86_64-unknown-linux-musl
      - run:
          name: Ignore Rust toolchain
          command: rm desktop/rust-toolchain.toml
      - run:
          name: Build fig_cli
          command: cd desktop && cargo build -rp fig_cli
      - run:
          name: Build figterm
          command: cd desktop && cargo build -rp figterm
      - run:
          name: Prepare binaries
          command: |
            mkdir -p bin/linux/x86_64/
            mv desktop/target/x86_64-unknown-linux-musl/release/fig_cli bin/linux/x86_64/fig_cli
            mv desktop/target/x86_64-unknown-linux-musl/release/figterm bin/linux/x86_64/figterm
      - persist_to_workspace:
          root: .
          paths:
            - bin/linux/x86_64/fig_cli
            - bin/linux/x86_64/figterm

  linux-headless-aarch64:
    docker:
      - image: messense/rust-musl-cross:aarch64-musl
    resource_class: large
    steps:
      - require-target:
          platform: linux
      - prepare-build:
          arch: aarch64
          include_desktop_deps: false
          install_rust: false
      - run:
          name: Install musl stuff
          command: apt install -y musl-dev
      - run:
          name: Update rust
          # rustup update can throw error on missing folder:
          # https://github.com/rust-lang/rustup/issues/1480
          command: rustup toolchain uninstall stable && rustup toolchain install stable
      - run:
          name: Install Rust toolchain
          command: rustup target add aarch64-unknown-linux-musl
      - run:
          name: Ignore Rust toolchain
          command: rm desktop/rust-toolchain.toml
      - run:
          name: Build fig_cli
          command: cd desktop && cargo build -rp fig_cli
      - run:
          name: Build figterm
          command: cd desktop && cargo build -rp figterm
      - run:
          name: Prepare binaries
          command: |
            mkdir -p bin/linux/aarch64/
            mv desktop/target/aarch64-unknown-linux-musl/release/fig_cli bin/linux/aarch64/fig_cli
            mv desktop/target/aarch64-unknown-linux-musl/release/figterm bin/linux/aarch64/figterm
      - persist_to_workspace:
          root: .
          paths:
            - bin/linux/aarch64/fig_cli
            - bin/linux/aarch64/figterm

  linux-desktop-x86_64:
    docker:
      - image: ubuntu:bionic
    resource_class: large
    steps:
      - require-target:
          platform: linux
      - prepare-build:
          arch: x86_64
          include_desktop_deps: true
          install_rust: true
      - run:
          name: Build fig_desktop
          command: cd desktop && cargo build -rp fig_desktop
      - run:
          name: Prepare binaries
          command: |
            mkdir -p bin/linux/x86_64/
            mv desktop/target/release/fig_desktop bin/linux/x86_64/fig_desktop
      - persist_to_workspace:
          root: .
          paths:
            - bin/linux/x86_64/fig_desktop

  macos:
    macos:
      xcode: 13.4.1
    resource_class: macos.x86.medium.gen2
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
      FIG_MACOS_BACKPORT: 1
    steps:
      - require-target:
          platform: macos
      - checkout-desktop
      - run:
          name: Remove gitconfig
          command: rm ~/.gitconfig
      - run:
          name: Install Build Dependencies
          command: brew install jq protobuf node gh
      - rust/install:
          version: 1.65.0
      - run:
          name: Configure rust
          command: |
            ./desktop/build-scripts/rust-init.sh
            rustup target add aarch64-apple-darwin
            rustup target add x86_64-apple-darwin
      - run:
          name: Install tauri CLI
          command: |
            cd desktop
            gh release download tauri-cli-macos
            chmod +x cargo-tauri
            mv cargo-tauri /usr/local/bin/cargo-tauri
      - run:
          name: Build fig_cli
          command: |
            cd desktop
            mkdir -p "$PRODUCTS_DIR"
            cargo build --target=x86_64-apple-darwin --target=aarch64-apple-darwin --locked --release --package fig_cli
            lipo -create -output "$PRODUCTS_DIR/fig-darwin-universal" target/{x86_64,aarch64}-apple-darwin/release/fig_cli
          environment:
            PRODUCTS_DIR: build/usr/bin
            TARGET: universal-apple-darwin
      - run:
          name: Build figterm
          command: |
            cd desktop
            cargo build --target=x86_64-apple-darwin --target=aarch64-apple-darwin --locked --release --package figterm
            lipo -create -output "$PRODUCTS_DIR/figterm-darwin-universal" target/{x86_64,aarch64}-apple-darwin/release/figterm
          environment:
            PRODUCTS_DIR: build/usr/bin
            TARGET: universal-apple-darwin
      - run:
          name: Build input method
          command: |
            cd desktop
            build-scripts/ime.sh
      - run:
          name: Create app bundle
          command: |
            cd desktop
            IS_HEADLESS=0 build-scripts/macos.sh
            mv "$PRODUCTS_DIR/fig-darwin-universal" "$PRODUCTS_DIR/fig-darwin-universal-$TARGET"
            mv "$PRODUCTS_DIR/figterm-darwin-universal" "$PRODUCTS_DIR/figterm-$TARGET"
            config=$(jq -n \
              --arg fig_cli "$(pwd)/$PRODUCTS_DIR/fig-darwin-universal" \
              --arg figterm "$(pwd)/$PRODUCTS_DIR/figterm" \
              '{"tauri": {"bundle": {"externalBin": [$fig_cli, $figterm], "resources": ["manifest.json"]}}}'
            )
            cd fig_desktop
            echo $config > build-config.json
            for entry in "authors" "homepage" "version"; do
              new=`grep "^$entry = .*\$" ../Cargo.toml`
              sed -i '' "s#$entry\.workspace = true#$new#g" Cargo.toml
            done
            PRODUCTS_DIR="../$PRODUCTS_DIR" cargo-tauri build --config ./build-config.json --target "$TARGET"
            rm build-config.json
            cd ..

            bundle_dir="$(pwd)/target/universal-apple-darwin/release/bundle/macos/"
            rm -rf "${bundle_dir}/Fig.app"
            mv "${bundle_dir}/fig_desktop.app" "${bundle_dir}/Fig.app"
            cp -r ./config "${bundle_dir}/Fig.app/Contents/Resources"

            # Add legacy Sparkle ED Public Key - required for migration but can be removed afterwards
            defaults write "${bundle_dir}/Fig.app/Contents/Info.plist" SUPublicEDKey 5Mzvu9ARpu2fmUhnxCH3D7txwJYo7MmLqRv9ddSIbuA=
            defaults write "${bundle_dir}/Fig.app/Contents/Info.plist" LSUIElement -bool TRUE
            
            # Change the display name of the app
            defaults write "${bundle_dir}/Fig.app/Contents/Info.plist" CFBundleDisplayName Fig
            defaults write "${bundle_dir}/Fig.app/Contents/Info.plist" CFBundleName Fig

            # Add fig:// association to bundle
            plutil -insert CFBundleURLTypes -xml '<array><dict><key>CFBundleURLName</key><string>CustomID</string><key>CFBundleURLSchemes</key><array><string>fig</string></array></dict></array>' "${bundle_dir}/Fig.app/Contents/Info.plist"

            mkdir -p "${bundle_dir}/Fig.app/Contents/Helpers/"
            cp -r build/FigInputMethod.app "${bundle_dir}/Fig.app/Contents/Helpers/"

            echo "export BUNDLE_PATH=${bundle_dir}/Fig.app" >> $BASH_ENV
          environment:
            PRODUCTS_DIR: build/usr/bin
            TARGET: universal-apple-darwin
      - setup-signing-identity-macos
      - run:
          name: Codesign Bundle
          command: |
            codesign -v --timestamp --force --strict --options=runtime -s "$CODESIGNING_IDENTITY" -i io.fig.cli "$BUNDLE_PATH/Contents/MacOS/fig-darwin-universal"
            codesign -v --timestamp --force --strict --options=runtime -s "$CODESIGNING_IDENTITY" -i io.fig.figterm "$BUNDLE_PATH/Contents/MacOS/figterm" 
            codesign -v --timestamp --force --strict --options=runtime -s "$CODESIGNING_IDENTITY" -i io.fig.figterm "$BUNDLE_PATH/Contents/Helpers/FigInputMethod.app" 
            codesign -v --timestamp --force --strict --options=runtime -s "$CODESIGNING_IDENTITY" "$BUNDLE_PATH"
            codesign --verify --verbose --strict "$BUNDLE_PATH"
      - run:
          name: Notarize and Staple Bundle
          command: |
            ditto -c -k --keepParent "$BUNDLE_PATH" Fig.zip
            xcrun notarytool submit Fig.zip --apple-id "$NOTARIZE_USERNAME" --password "$NOTARIZE_PASSWORD" --team-id "$NOTARIZE_TEAM_ID" --wait
            rm Fig.zip
            xcrun stapler staple "$BUNDLE_PATH"
            # Verify notarization ticket
            spctl -a -v "$BUNDLE_PATH"
      - run:
          name: Create DMG
          command: |
            npm install -g appdmg
            FILE_CONTENTS=$(jq -n \
              --arg bundle "$BUNDLE_PATH" \
              --arg identity "$CODESIGNING_IDENTITY" \
              '{
                "title": "Fig",
                "icon": "VolumeIcon.icns",
                "background": "background.png",
                "icon-size": 160,
                "format": "ULFO",
                "window": {
                  "size": {
                    "width": 660,
                    "height": 400
                  }
                },
                "contents": [
                  {
                    "x": 180,
                    "y": 170,
                    "type": "file",
                    "path": $bundle
                  },
                  {
                    "x": 480,
                    "y": 170,
                    "type": "link",
                    "path": "/Applications"
                  }
                ],
                "code-sign": {
                  "signing-identity": $identity
                }
              }'
            )
            echo "$FILE_CONTENTS" > ./desktop/bundle/dmg/spec.json
            appdmg ./desktop/bundle/dmg/spec.json fig.dmg
      - run:
          name: Notarize DMG
          command: |
            xcrun notarytool submit fig.dmg --apple-id "$NOTARIZE_USERNAME" --password "$NOTARIZE_PASSWORD" --team-id "$NOTARIZE_TEAM_ID" --wait
            spctl -a -t open --context context:primary-signature -v fig.dmg
      - store_artifacts:
          path: fig.dmg
          destination: pkg/os=macos,arch=universal,kind=dmg
      - run:
          name: Move DMG
          command: |
            DIR="/tmp/new/pkg/macos/universal/dmg/full"
            mkdir -p "$DIR/"
            mv fig.dmg "$DIR/pkg"
      - persist_to_workspace:
          root: /tmp/new
          paths:
            - pkg/macos/universal/dmg/full/pkg

  package-tarball:
    docker:
      - image: cimg/base:edge-22.04
    resource_class: small
    steps:
      - require-target:
          platform: linux
      - prepare-package
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y gettext
      - checkout-desktop
      - attach_workspace:
          at: /tmp/ws
      - package:
          arch: x86_64
          kind: tar
          variant: full
          ext: tar.xz
      - package:
          arch: x86_64
          kind: tar
          variant: headless
          ext: tar.xz
      - package:
          arch: aarch64
          kind: tar
          variant: headless
          ext: tar.xz
      - persist_to_workspace:
          root: /tmp/new
          paths:
            - pkg/x86_64/tar/full/pkg
            - pkg/x86_64/tar/headless/pkg
            - pkg/aarch64/tar/headless/pkg

  package-rpm:
    docker:
      - image: fedora:36
    resource_class: small
    environment:
      FIG_CLI: /tmp/ws/bin/linux/x86_64/fig_cli
      FIGTERM: /tmp/ws/bin/linux/x86_64/figterm
      FIG_DESKTOP: /tmp/ws/bin/linux/x86_64/fig_desktop
      ARCH: x86_64
    steps:
      - require-target:
          platform: linux
      - prepare-package
      - run:
          name: Install tools
          command: dnf install -y git jq rpmdevtools gettext
      - checkout-desktop
      - attach_workspace:
          at: /tmp/ws
      - package:
          arch: x86_64
          kind: rpm
          variant: full
          ext: rpm
      - when:
          condition: << pipeline.parameters.compat>>
          steps:
            - run:
                name: Collect full x86_64 rpm info
                command: |
                  rpm --query --xml desktop/fig.rpm > /tmp/rpm.xml
                  curl -X POST << pipeline.parameters.callback_url >> -d "rpm_metadata;x86_64;full;$(cat /tmp/rpm.xml)"
      - package:
          arch: x86_64
          kind: rpm
          variant: headless
          ext: rpm
      - when:
          condition: << pipeline.parameters.compat>>
          steps:
            - run:
                name: Collect headless x86_64 rpm info
                command: |
                  rpm --query --xml desktop/fig.rpm > /tmp/rpm.xml
                  curl -X POST << pipeline.parameters.callback_url >> -d "rpm_metadata;x86_64;headless;$(cat /tmp/rpm.xml)"
      - package:
          arch: aarch64
          kind: rpm
          variant: headless
          ext: rpm
      - when:
          condition: << pipeline.parameters.compat>>
          steps:
            - run:
                name: Collect headless aarch64 rpm info
                command: |
                  rpm --query --xml desktop/fig.rpm > /tmp/rpm.xml
                  curl -X POST << pipeline.parameters.callback_url >> -d "rpm_metadata;aarch64;headless;$(cat /tmp/rpm.xml)"
      - persist_to_workspace:
          root: /tmp/new
          paths:
            - pkg/linux/x86_64/rpm/full/pkg
            - pkg/linux/x86_64/rpm/headless/pkg
            - pkg/linux/aarch64/rpm/headless/pkg

  package-deb:
    docker:
      - image: cimg/base:edge-22.04
    resource_class: small
    steps:
      - require-target:
          platform: linux
      - prepare-package
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y gettext
      - checkout-desktop
      - attach_workspace:
          at: /tmp/ws
      - package:
          arch: x86_64
          kind: deb
          variant: full
          ext: deb
      - package:
          arch: x86_64
          kind: deb
          variant: headless
          ext: deb
      - package:
          arch: aarch64
          kind: deb
          variant: headless
          ext: deb
      - persist_to_workspace:
          root: /tmp/new
          paths:
            - pkg/x86_64/deb/full/pkg
            - pkg/x86_64/deb/headless/pkg
            - pkg/aarch64/deb/headless/pkg
  
  publish-packages:
    docker:
      - image: cimg/base:edge-22.04
    resource_class: small
    steps:
      - checkout-desktop
      - install-fig-release
      - attach_workspace:
          at: /tmp/ws
      - run:
          name: Init token
          command: echo 'export FIG_TOKEN="$FIG_CI_TOKEN"' >> $BASH_ENV
      - if-target:
          platform: linux
          steps:
            - run:
                name: Publish linux-full-x86_64
                command: |
                  cd desktop

                  fig_release package --kind deb --architecture x86_64 --variant full /tmp/ws/pkg/linux/x86_64/deb/full/pkg
                  fig_release package --kind deb --architecture x86_64 --variant headless /tmp/ws/pkg/linux/x86_64/deb/headless/pkg
                  fig_release package --kind deb --architecture aarch64 --variant headless /tmp/ws/pkg/linux/aarch64/deb/headless/pkg

                  fig_release package --kind rpm --architecture x86_64 --variant full /tmp/ws/pkg/linux/x86_64/rpm/full/pkg
                  fig_release package --kind rpm --architecture x86_64 --variant headless /tmp/ws/pkg/linux/x86_64/rpm/headless/pkg
                  fig_release package --kind rpm --architecture aarch64 --variant headless /tmp/ws/pkg/linux/aarch64/rpm/headless/pkg

                  fig_release package --kind tar --architecture x86_64 --variant full /tmp/ws/pkg/linux/x86_64/tar/full/pkg
                  fig_release package --kind tar --architecture x86_64 --variant headless /tmp/ws/pkg/linux/x86_64/tar/headless/pkg
                  fig_release package --kind tar --architecture aarch64 --variant headless /tmp/ws/pkg/linux/aarch64/tar/headless/pkg
      - if-target:
          platform: macos
          steps:
            - run:
                name: Publish macos
                command: |
                  cd desktop
                  fig_release package --kind dmg --architecture universal --variant full /tmp/ws/pkg/macos/universal/dmg/full/pkg
      - if-target:
          platform: windows
          steps:
            - run:
                name: Publish windows
                command: |
                  cd desktop
                  fig_release package --kind exe --architecture x86_64 --variant windows_installer /tmp/ws/pkg/x86_64/exe/windows_installer/pkg

  # Does sentry
  sentry:
    docker:
      - image: cimg/base:edge-22.04
    resource_class: small
    environment:
      SENTRY_ORG: withfig
      SENTRY_PROJECT: fig-rust-desktop
      SENTRY_ENVIRONMENT: production
    steps:
      - checkout-desktop
      - run:
          name: Install sentry
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
      - run:
          name: Create new sentry release
          command: |
            cd desktop
            export SENTRY_RELEASE=fig-rust-desktop@$(jq -r '.FIG_VERSION' bundle/bundle_info.json)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
            sentry-cli releases set-commits $SENTRY_RELEASE --auto
            sentry-cli releases finalize $SENTRY_RELEASE
            sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT

  # Does nothing. Prevents build errors. Ask Mia for more info.
  noop:
    docker:
      - image: cimg/base:edge-22.04
    resource_class: small
    steps:
      - run: echo noop

commands:
  package:
    parameters:
      arch:
        type: string
      kind:
        type: string
      variant:
        type: string
      ext:
        type: string
    steps:
      - run:
          name: Package << parameters.variant >> for << parameters.arch >>
          command: |
            if [[ '<< parameters.variant >>' = 'full' ]]; then
              export IS_HEADLESS=0
            elif [[ '<< parameters.variant >>' = 'headless' ]]; then
              export IS_HEADLESS=1
            fi

            export FIG_CLI=/tmp/ws/bin/linux/<< parameters.arch >>/fig_cli
            export FIGTERM=/tmp/ws/bin/linux/<< parameters.arch >>/figterm
            export FIG_DESKTOP=/tmp/ws/bin/linux/<< parameters.arch >>/fig_desktop
            export ARCH=<< parameters.arch >>

            cd desktop
            build-scripts/<< parameters.kind >>.sh
      - store_artifacts:
          path: desktop/fig.<< parameters.ext >>
          destination: pkg/os=linux,arch=<< parameters.arch >>,kind=<< parameters.kind >>,variant=<< parameters.variant >>
      - run:
          name: Move package
          command: |
            DIR="/tmp/new/pkg/linux/<< parameters.arch >>/<< parameters.kind >>/<< parameters.variant >>/"
            mkdir -p $DIR
            mv desktop/fig.<< parameters.ext >> $DIR/pkg

  # this should be the last step before you start building in
  # order to give github some time to process the new commit
  checkout-desktop:
    parameters:
      version_update:
        type: boolean
        default: false
    steps:
      - add_ssh_keys:
          fingerprints:
            - "75:6e:33:0a:e8:7b:05:0e:75:56:73:4a:ad:3d:df:dd"
      - checkout:
          path: desktop
      - when:
          condition:
            or:
              - not: << pipeline.parameters.compat >>
              - << parameters.version_update >>
          steps:
            - run:
                name: Checkout desktop
                command: |
                  cd desktop && git reset --hard HEAD && git checkout << pipeline.parameters.checkout >>
      - when:
          condition:
            and:
              - << pipeline.parameters.compat >>
              - not: << parameters.version_update >>
          steps:
            - run:
                name: Checkout desktop
                command: |
                  cd desktop && git reset --hard HEAD && git checkout build-<< pipeline.parameters.id >>

  configure-apt:
    steps:
      - run:
          name: Install sudo
          command: |
            if ! command -v sudo; then
              apt update
              apt install -y sudo
            fi
      - run:
          name: Configure APT
          command: |
            echo "export DEBIAN_FRONTEND=noninteractive" >> $BASH_ENV
            echo "export DEBCONF_NONINTERACTIVE_SEEN=true" >> $BASH_ENV
            echo "export TZ=America/Los_Angeles" >> $BASH_ENV
            sudo sed -i 's#archive.ubuntu.com/ubuntu#mirror.pit.teraswitch.com/ubuntu#g' /etc/apt/sources.list
            sudo sed -i 's#security.ubuntu.com/ubuntu#mirror.pit.teraswitch.com/ubuntu#g' /etc/apt/sources.list
            sudo apt update
      - run:
          name: Install noninteractive
          command: |
            echo 'tzdata tzdata/Areas select America' | sudo debconf-set-selections
            echo 'tzdata tzdata/Zones/America select Los_Angeles' | sudo debconf-set-selections
            sudo DEBIAN_FRONTEND=noninteractive TZ=America/Los_Angeles apt install -y tzdata keyboard-configuration

  prepare-build:
    parameters:
      arch:
        type: string
      include_desktop_deps:
        type: boolean
        default: true
      install_rust:
        type: boolean
    steps:
      - configure-apt
      - run:
          name: Update
          command: |
            sudo apt upgrade -y
      - run:
          name: Install dependencies
          command: sudo apt install -y clang cmake curl git jq unzip
      - when:
          condition: << parameters.include_desktop_deps >>
          steps:
            - run:
                name: Install desktop dependencies
                command: |
                  sudo apt install -y \
                    libayatana-appindicator3-dev \
                    libgtk-3-dev libibus-1.0-dev libwebkit2gtk-4.0-dev valac
      - install-protobuf
      - when:
          condition: << parameters.install_rust >>
          steps:
            - rust/install:
                version: 1.65.0
      - checkout-desktop
      - run:
          name: Configure rust
          command: ./desktop/build-scripts/rust-init.sh

  setup-signing-identity-macos:
    parameters:
      keychain_name:
        type: string
        default: fig-certificates-macos
      keychain_password:
        type: string
        default: hunter2
    steps:
      - run:
          name: Setup codesigning keychain
          command: |
            security create-keychain -p << parameters.keychain_password >> << parameters.keychain_name >> || echo "already exists"

            certificate_path="/tmp/certificate.p12"
            echo "$SIGNING_CERTIFICATE_P12_DATA" | base64 -d > $certificate_path
            security default-keychain -d user -s << parameters.keychain_name >>

            security unlock-keychain -p << parameters.keychain_password >> << parameters.keychain_name >>
            security import "$certificate_path" -f pkcs12 -k << parameters.keychain_name >> -P "$SIGNING_CERTIFICATE_PASSWORD" -T /usr/bin/codesign -x 
            rm "$certificate_path"
            security set-key-partition-list -S apple-tool:,apple: -s -k << parameters.keychain_password >> << parameters.keychain_name >>

            identity=$(security find-identity -v -p codesigning | grep -o "Developer ID Application.*(${NOTARIZE_TEAM_ID})")
            echo "export CODESIGNING_IDENTITY='$identity'" >> $BASH_ENV

            security set-keychain-settings -lut 1200

  install-protobuf:
    steps:
      - run:
          name: Install protobuf
          command: |
            curl -L -o /tmp/protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v21.6/protoc-21.6-linux-x86_64.zip
            unzip /tmp/protoc.zip -d /tmp/protoc
            sudo cp /tmp/protoc/bin/protoc /usr/local/bin/
            sudo cp -r /tmp/protoc/include/google /usr/local/include/
            sudo rm -r /tmp/protoc

  install-fig-release:
    steps:
      - run:
          name: Install gh-cli
          command: |
            type -p curl >/dev/null || sudo apt install curl -y
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
            && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
            && sudo apt update \
            && sudo apt install gh -y
      - run:
          name: Download fig_release
          command: |
            cd /tmp
            gh -R withfig/macos release download fig_release --clobber
            sudo mv fig_release /usr/bin/fig_release
            sudo chmod +x /usr/bin/fig_release
  
  prepare-package:
    steps:
      - rust/install:
          version: 1.65.0

  require:
    parameters:
      condition:
        type: boolean
    steps:
      - unless:
          condition: << parameters.condition >>
          steps:
            - run:
                name: Abort job
                command: circleci-agent step halt

  if-target:
    parameters:
      platform:
        type: string
      steps:
        type: steps
    steps:
      - when:
          condition:
            matches:
              pattern: "(:?,|^)<< parameters.platform >>(:?,|$)"
              value: << pipeline.parameters.build_targets >>
          steps: << parameters.steps >>

  if-not-target:
    parameters:
      platform:
        type: string
      steps:
        type: steps
    steps:
      - unless:
          condition:
            matches:
              pattern: ".*(:?,|^)<< parameters.platform >>(:?,|$).*"
              value: << pipeline.parameters.build_targets >>
          steps: << parameters.steps >>

  require-target:
    parameters:
      platform:
        type: string
    steps:
      - if-not-target:
          platform: << parameters.platform >>
          steps:
            - run:
                name: Abort job
                command: circleci-agent step halt
