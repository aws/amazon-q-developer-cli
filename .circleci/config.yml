supports_mold: &supports_mold
  or:
    - equal: [<< parameters.platform >>, kinetic]
    - equal: [<< parameters.platform >>, jammy]
    - equal: [<< parameters.platform >>, f36]

version: 2.1

orbs:
  rust: circleci/rust@1.6.0
  win: circleci/windows@5.0.0

parameters:
  version:
    type: string
    default: ""
  changelog:
    type: string
    default: ""
  callback_url:
    type: string
    default: ""
  id:
    type: string
    default: ""
  checkout:
    type: string
    default: "develop"

workflows:
  version: 2
  build:
    when:
      equal: [<< pipeline.trigger_source >>, api]
    jobs:
      - update-version
      - ubuntu-x86_64:
          requires: [update-version]
          matrix:
            parameters:
              platform: [kinetic, jammy, focal]
      - ubuntu-x86_64-cli-only:
          requires: [update-version]
          matrix:
            parameters:
              platform: [xenial]
      - ubuntu-aarch64-focal:
          requires: [update-version]
      - fedora-x86_64:
          requires: [update-version]
          matrix:
            parameters:
              version: ["36"]
      - windows:
          requires: [update-version]
      - sentry:
          requires: [ubuntu-x86_64, fedora-x86_64, ubuntu-aarch64-focal, windows]
          context:
            - sentry
  noop:
    when:
      not:
        equal: [<< pipeline.trigger_source >>, api]
    jobs:
      - noop

jobs:
  ubuntu-x86_64:
    parameters:
      platform:
        type: string
    docker:
      - image: ubuntu:<< parameters.platform >>
    resource_class: large
    steps:
      - build-ubuntu:
          platform: << parameters.platform >>
          arch: x86_64

  ubuntu-x86_64-cli-only:
    parameters:
      platform:
        type: string
    docker:
      - image: ubuntu:<< parameters.platform >>
    resource_class: large
    steps:
      - build-ubuntu-cli-only:
          platform: << parameters.platform >>
          arch: x86_64

  ubuntu-aarch64-focal:
    machine:
      image: ubuntu-2004:current
    resource_class: arm.large
    steps:
      - build-ubuntu:
          platform: focal
          arch: aarch64

  fedora-x86_64:
    parameters:
      version:
        type: string
    docker:
      - image: fedora:<< parameters.version >>
    resource_class: large
    steps:
      - build-fedora:
          platform: f<< parameters.version >>
          arch: x86_64

  windows:
    environment:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    executor: 
      name: win/server-2022
      size: large
      shell: bash.exe
    steps:
      - checkout-desktop
      - run:
          name: Install dependencies
          command: |
            curl https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe -o rustup-init.exe
            ./rustup-init.exe -y --profile minimal --default-host x86_64-pc-windows-msvc --default-toolchain stable
            PATH="$PATH:$HOME/.cargo/bin"

            choco install protoc -y

            choco install wixtoolset -y
            PATH="$PATH:C:\Program Files (x86)\WiX Toolset v3.11\bin"

            cargo install cargo-wix

            BASH_ENV=$PATH
      #- run:
      #    name: Build
      #    command: |
      #      cd desktop
      #      cargo build --release
      - run:
          name: Bundle
          command: |
            cd desktop
            cargo wix -p "fig_desktop" -n "fig" --no-build --nocapture -v
      - store_artifacts:
          path: desktop\build\wix\fig-2.0.3-x86_64.msi
          destination: windows/msi

  # Creates tag on specified revision
  update-version:
    docker:
      - image: ubuntu:22.04
    resource_class: small
    steps:
      - configure-apt:
          platform: jammy
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y curl git jq python3-pip
            python3 -m pip install semver
      - checkout-desktop:
          checkout: << pipeline.parameters.checkout >>
      - run:
          name: Resolve relative version
          command: |
            LAST_VERSION=`sed -nr 's/^version[[:space:]]*=[[:space:]]*\"([^"]*)\"/\1/p' desktop/fig_desktop/Cargo.toml | head -1`
            PIPELINE_VERSION=<< pipeline.parameters.version >>
            echo $PIPELINE_VERSION > version
            if [[ $PIPELINE_VERSION == "major" ]] || [[ $PIPELINE_VERSION == "minor" ]] || [[ $PIPELINE_VERSION == "patch" ]]; then
              echo "import sys, semver
            ver = semver.VersionInfo.parse(sys.argv[1])
            match sys.argv[2]:
              case 'major':
                ver = ver.bump_major()
              case 'minor':
                ver = ver.bump_minor()
              case 'patch':
                ver = ver.bump_patch()
            print(str(ver))" > version_bump.py
              python3 version_bump.py $LAST_VERSION $PIPELINE_VERSION > version
            fi
            curl -X POST << pipeline.parameters.callback_url >> -d "version;$(cat version)"
      - run:
          name: Update versions
          command: |
            NEW_VERSION=`cat version`
            cd desktop
            sed -i "0,/^version = \"[^\"]*\"\$/s//version = \"$NEW_VERSION\"/" fig_desktop/Cargo.toml
      - run:
          name: Push tagged release
          command: |
            NEW_VERSION=`cat version`
            GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"
            cd desktop
            git config user.name 'Fig Deploy'
            git config user.email 'deploy@fig.io'
            git add fig_desktop/Cargo.toml
            git checkout -B build-<< pipeline.parameters.id >>
            printf "Version $NEW_VERSION [skip-ci]\n\n<< pipeline.parameters.changelog >>" > commit_message
            git commit --allow-empty --file commit_message
            git push  --set-upstream origin build-<< pipeline.parameters.id >>
            git tag --annotate --force --message "<< pipeline.parameters.changelog >>" $NEW_VERSION
            git push --tags --force
            COMMIT_HASH=`git log -n 1 --pretty=format:"%H"`
            curl -X POST << pipeline.parameters.callback_url >> -d "commit;$COMMIT_HASH"

  # Does sentry
  sentry:
    docker:
      - image: cimg/base:2022.08
    resource_class: small
    environment:
      SENTRY_ORG: withfig
      SENTRY_PROJECT: fig-rust-desktop
      SENTRY_ENVIRONMENT: production
    steps:
      - checkout-desktop
      - run:
          name: Install sentry
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
      - run:
          name: Create new sentry release
          command: |
            cd desktop
            export SENTRY_RELEASE=fig-rust-desktop@$(jq -r '.FIG_VERSION' bundle/bundle_info.json)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
            sentry-cli releases set-commits $SENTRY_RELEASE --auto
            sentry-cli releases finalize $SENTRY_RELEASE
            sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT

  # Does nothing. Prevents build errors. Ask Mia for more info.
  noop:
    docker:
      - image: cimg/base:2022.06-22.04
    resource_class: small
    steps:
      - run: echo noop

commands:
  callback:
    parameters:
      command:
        type: string
      args:
        type: string
        default: ""
    steps:
      - run: curl -X POST << pipeline.parameters.callback_url >> -d "<< parameters.command >>;<< parameters.args >>"

  prepare-post:
    parameters:
      platform:
        type: string
      rust-target:
        type: string
    steps:
      - checkout-desktop
      - configure-rust:
          platform: << parameters.platform >>
          target: << parameters.rust-target >>

  checkout-desktop:
    parameters:
      checkout:
        type: string
        default: build-<< pipeline.parameters.id >>
    steps:
      - add_ssh_keys:
          fingerprints:
            - "75:6e:33:0a:e8:7b:05:0e:75:56:73:4a:ad:3d:df:dd"
      - checkout:
          path: desktop
      - run:
          name: Checkout desktop
          command: |
            cd desktop && git reset --hard HEAD && git checkout << parameters.checkout >>

  configure-rust:
    parameters:
      platform:
        type: string
      target:
        type: string
    steps:
      - rust/install:
          version: 1.62.0
      - when:
          condition: *supports_mold
          steps:
            - run:
                name: Configure rust
                command: printf '[target.<< parameters.target >>]\nrustflags = ["-C", "link-arg=-fuse-ld=mold"]' > ~/.cargo/config.toml
      - when:
          condition:
            not: *supports_mold
          steps:
            - run:
                name: Configure rust
                command: printf '[target.<< parameters.target >>]\nrustflags = ["-C", "link-arg=-fuse-ld=lld"]' > ~/.cargo/config.toml

  configure-apt:
    parameters:
      platform:
        type: string
    steps:
      - run:
          name: Install sudo
          command: |
            if ! command -v sudo; then
              apt update
              apt install -y sudo
            fi
      - run:
          name: Configure APT
          command: |
            echo "export DEBIAN_FRONTEND=noninteractive" >> $BASH_ENV
            echo "export DEBCONF_NONINTERACTIVE_SEEN=true" >> $BASH_ENV
            echo "export TZ=America/Los_Angeles" >> $BASH_ENV
            sudo sed -i 's#archive.ubuntu.com/ubuntu#mirror.pit.teraswitch.com/ubuntu#g' /etc/apt/sources.list
            sudo sed -i 's#security.ubuntu.com/ubuntu#mirror.pit.teraswitch.com/ubuntu#g' /etc/apt/sources.list
            sudo apt update
      - run:
          name: Install noninteractive
          command: |
            echo 'tzdata tzdata/Areas select America' | sudo debconf-set-selections
            echo 'tzdata tzdata/Zones/America select Los_Angeles' | sudo debconf-set-selections
            sudo DEBIAN_FRONTEND=noninteractive TZ=America/Los_Angeles apt install -y tzdata keyboard-configuration
      - when:
          condition:
            equal: [<< parameters.platform >>, xenial]
          steps:
            - run:
                name: Configure cmake and clang repositories
                command: |
                  sudo apt install -y apt-transport-https ca-certificates gnupg wget
                  wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -
                  sudo echo "deb http://apt.kitware.com/ubuntu/ << parameters.platform >> main" >> /etc/apt/sources.list

                  wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
                  sudo echo "deb http://apt.llvm.org/<< parameters.platform >>/ llvm-toolchain-<< parameters.platform >> main" >> /etc/apt/sources.list

                  sudo apt update

  prepare-debian:
    parameters:
      platform:
        type: string
      arch:
        type: string
      include_desktop_deps:
        type: boolean
        default: true
    steps:
      - configure-apt:
          platform: << parameters.platform >>
      - run:
          name: Update
          command: |
            sudo apt upgrade -y
      - run:
          name: Install dependencies
          command: sudo apt install -y clang cmake curl git jq
      - when:
          condition: << parameters.include_desktop_deps >>
          steps:
            - run:
                name: Install desktop dependencies
                command: |
                  sudo apt install -y \
                    libayatana-appindicator3-dev \
                    libgtk-3-dev libibus-1.0-dev libwebkit2gtk-4.0-dev valac
      - when:
          condition:
            equal: [<< parameters.platform >>, xenial]
          steps:
            - run:
                name: Set cc to clang
                command: sudo update-alternatives --install /usr/bin/cc cc /usr/bin/clang 30
      - when:
          condition: *supports_mold
          steps:
            - run:
                name: Install mold
                command: sudo apt install -y mold
      - when:
          condition:
            and:
              - not: *supports_mold
          steps:
            - run:
                name: Install lld
                command: sudo apt install -y lld
      - prepare-post:
          platform: << parameters.platform >>
          rust-target: << parameters.arch >>-unknown-linux-gnu

  prepare-fedora:
    parameters:
      platform:
        type: string
      arch:
        type: string
    steps:
      - run:
          name: Configure DNF
          command: |
            printf \nfastestmirror=1 >>/etc/dnf/dnf.conf
            sudo dnf clean all
      - run:
          name: Update
          command: sudo dnf upgrade -y
      - run:
          name: Install dependencies
          command: |
            sudo dnf install -y clang cmake curl gcc git gtk3-devel g++ ibus-devel jq libappindicator-gtk3-devel make mold \
                           openssl-devel perl-FindBin rpmdevtools vala webkit2gtk3-devel
      - run:
          # this *should not* be necessary, but it doesn't appear to work without this
          name: Configure git
          command: git config --global --add safe.directory /tmp/_circleci_local_build_repo
      - prepare-post:
          platform: << parameters.platform >>
          rust-target: << parameters.arch >>-unknown-linux-gnu

  # Builds packages for Ubuntu
  build-ubuntu:
    parameters:
      platform:
        type: string
      arch:
        type: string
    steps:
      - prepare-debian:
          platform: << parameters.platform >>
          arch: << parameters.arch >>
      - callback:
          command: dependencies
          args: << parameters.platform >>;libwebkit2gtk-4.0-37 libgtk-3-0 libayatana-appindicator3-1 libayatana-appindicator3-dev ibus
      - run:
          name: Build
          command: cd desktop && make ARCH=<< parameters.arch >> archive && make ARCH=<< parameters.arch >> deb
      - store_artifacts:
          path: desktop/build/fig-<< parameters.arch >>-linux.deb
          destination: << parameters.platform >>/<< parameters.arch >>/deb
      - store_artifacts:
          path: desktop/build/fig-<< parameters.arch >>-linux.tar.gz
          destination: << parameters.platform >>/<< parameters.arch >>/archive
      - store_artifacts:
          path: desktop/build/usr/bin/fig
          destination: << parameters.platform >>/<< parameters.arch >>-unknown-linux-gnu/bin

  build-ubuntu-cli-only:
    parameters:
      platform:
        type: string
      arch:
        type: string
    steps:
      - prepare-debian:
          platform: << parameters.platform >>
          arch: << parameters.arch >>
          include_desktop_deps: false
      - run:
          name: Build CLI
          command: cd desktop && make ARCH=<< parameters.arch >> fig
      - store_artifacts:
          path: desktop/build/usr/bin/fig
          destination: << parameters.platform >>/<< parameters.arch >>-unknown-linux-gnu/bin

  build-fedora:
    parameters:
      platform:
        type: string
      arch:
        type: string
    steps:
      - prepare-fedora:
          platform: << parameters.platform >>
          arch: << parameters.arch >>
      - run:
          name: Build
          command: cd desktop && make ARCH=<< parameters.arch >> archive && make ARCH=<< parameters.arch >> rpm
      - run:
          name: Gather RPM metadata
          command: |
            rpm --query --requires desktop/build/fig-<< parameters.arch >>-linux.rpm > /tmp/requires.txt
            rpm --query --provides desktop/build/fig-<< parameters.arch >>-linux.rpm > /tmp/provides.txt
            rpm --query --info desktop/build/fig-<< parameters.arch >>-linux.rpm | grep Size | egrep -o '[0-9]*' > /tmp/installed-size.txt
      - callback:
          command: dependencies
          args: << parameters.platform >>;webkit2gtk3 gtk3 libappindicator-gtk3 ibus
      - callback:
          command: rpm_requires
          args: << parameters.platform >>;$(cat /tmp/requires.txt)
      - callback:
          command: rpm_provides
          args: << parameters.platform >>;$(cat /tmp/provides.txt)
      - callback:
          command: rpm_installed_size
          args: << parameters.platform >>;$(cat /tmp/installed-size.txt)
      - store_artifacts:
          path: desktop/build/fig-<< parameters.arch >>-linux.rpm
          destination: << parameters.platform >>/<< parameters.arch >>/rpm
      - store_artifacts:
          path: desktop/build/fig-<< parameters.arch >>-linux.tar.gz
          destination: << parameters.platform >>/<< parameters.arch >>/archive
      - store_artifacts:
          path: desktop/build/fig
          destination: << parameters.platform >>/<< parameters.arch >>-unknown-linux-gnu/bin
