version: 2.1

orbs:
  rust: circleci/rust@1.6.0
  win: circleci/windows@5.0.0

parameters:
  version:
    type: string
    default: ""
  changelog:
    type: string
    default: ""
  callback_url:
    type: string
    default: ""
  id:
    type: string
    default: ""
  checkout:
    type: string
    default: ""

workflows:
  version: 2
  build:
    when:
      equal: [<< pipeline.trigger_source >>, api]
    jobs:
      - update-version

      - windows:
          requires: [update-version]
      - linux-headless-x86_64:
          requires: [update-version]
      - linux-headless-aarch64:
          requires: [update-version]
      - linux-desktop-x86_64:
          requires: [update-version]

      - package-tarball:
          requires:
            [
              linux-desktop-x86_64,
              linux-headless-aarch64,
              linux-headless-x86_64,
            ]
      - package-rpm:
          requires:
            [
              linux-desktop-x86_64,
              linux-headless-aarch64,
              linux-headless-x86_64,
            ]
      - package-deb:
          requires:
            [
              linux-desktop-x86_64,
              linux-headless-aarch64,
              linux-headless-x86_64,
            ]

      - sentry:
          requires: [package-tarball, package-deb, package-rpm, windows]
          context:
            - sentry
  noop:
    when:
      not:
        equal: [<< pipeline.trigger_source >>, api]
    jobs:
      - noop

jobs:
  # Creates tag on specified revision
  update-version:
    docker:
      - image: ubuntu:22.04
    resource_class: small
    steps:
      - configure-apt
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y curl git jq python3-pip
            python3 -m pip install semver
      - rust/install:
          version: 1.63.0
      - checkout-desktop:
          checkout: << pipeline.parameters.checkout >>
      - run:
          name: Resolve relative version
          command: |
            LAST_VERSION=`sed -nr 's/^version[[:space:]]*=[[:space:]]*\"([^"]*)\"/\1/p' desktop/fig_desktop/Cargo.toml | head -1`
            PIPELINE_VERSION=<< pipeline.parameters.version >>
            echo $PIPELINE_VERSION > version
            if [[ $PIPELINE_VERSION == "major" ]] || [[ $PIPELINE_VERSION == "minor" ]] || [[ $PIPELINE_VERSION == "patch" ]]; then
              echo "import sys, semver
            ver = semver.VersionInfo.parse(sys.argv[1])
            match sys.argv[2]:
              case 'major':
                ver = ver.bump_major()
              case 'minor':
                ver = ver.bump_minor()
              case 'patch':
                ver = ver.bump_patch()
            print(str(ver))" > version_bump.py
              python3 version_bump.py $LAST_VERSION $PIPELINE_VERSION > version
            fi
            curl -X POST << pipeline.parameters.callback_url >> -d "version;$(cat version)"
      - run:
          name: Update versions
          command: |
            NEW_VERSION=`cat version`
            cd desktop
            sed -i "0,/^version = \"[^\"]*\"\$/s//version = \"$NEW_VERSION\"/" fig_desktop/Cargo.toml
            sed -i "s/Version=\"[^\"]*\"/Version=\"$NEW_VERSION\"/" fig.wxi
      - run:
          name: Update lockfile
          command: cd desktop && cargo update -p fig_desktop
      - run:
          name: Push tagged release
          command: |
            NEW_VERSION=`cat version`
            GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"
            cd desktop
            git config user.name 'fig-deploy[bot]'
            git config user.email '109307685+fig-deploy[bot]@users.noreply.github.com'
            git add Cargo.lock
            git add fig_desktop/Cargo.toml
            git add fig.wxi
            git checkout -B build-<< pipeline.parameters.id >>
            printf "Version $NEW_VERSION [skip-ci] [skip ci]\n\n<< pipeline.parameters.changelog >>" > commit_message
            git commit --allow-empty --file commit_message
            git push  --set-upstream origin build-<< pipeline.parameters.id >>
            git tag --annotate --force --message "<< pipeline.parameters.changelog >>" $NEW_VERSION
            git push --tags --force
            COMMIT_HASH=`git log -n 1 --pretty=format:"%H"`
            curl -X POST << pipeline.parameters.callback_url >> -d "commit;$COMMIT_HASH"

  windows:
    environment:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    executor:
      name: win/server-2022
      size: large
      shell: bash.exe
    steps:
      - run:
          name: Install dependencies
          command: |
            curl https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe -o rustup-init.exe
            ./rustup-init.exe -y --profile minimal --default-host x86_64-pc-windows-msvc --default-toolchain stable
            PATH="$PATH:$HOME/.cargo/bin"

            choco install protoc -y

            choco install wixtoolset -y
            PATH="$PATH:/c/Program Files (x86)/WiX Toolset v3.11/bin"

            echo "export PATH=\"$PATH\"" >> $BASH_ENV
      - checkout-desktop
      - run:
          name: Build and bundle
          command: |
            cd desktop
            ./bundle.bat
      - store_artifacts:
          path: desktop/target/wix/fig_installer.exe
          destination: pkg/os=windows,arch=x86_64,kind=exe

  linux-headless-x86_64:
    docker:
      - image: messense/rust-musl-cross:x86_64-musl
    resource_class: large
    steps:
      - prepare-build:
          arch: x86_64
          include_desktop_deps: false
      - run:
          name: Install musl stuff
          command: apt install -y musl-dev
      - run:
          name: Install Rust toolchain
          command: rustup target add x86_64-unknown-linux-musl
      - run:
          name: Build fig_cli
          command: cd desktop && cargo build -rp fig_cli
      - run:
          name: Build figterm
          command: cd desktop && cargo build -rp figterm
      - run:
          name: Prepare binaries
          command: |
            mkdir -p bin/linux/x86_64/
            mv desktop/target/x86_64-unknown-linux-musl/release/fig_cli bin/linux/x86_64/fig_cli
            mv desktop/target/x86_64-unknown-linux-musl/release/figterm bin/linux/x86_64/figterm
      - persist_to_workspace:
          root: .
          paths:
            - bin/linux/x86_64/fig_cli
            - bin/linux/x86_64/figterm

  linux-headless-aarch64:
    docker:
      - image: messense/rust-musl-cross:aarch64-musl
    resource_class: large
    steps:
      - prepare-build:
          arch: aarch64
          include_desktop_deps: false
      - run:
          name: Install musl stuff
          command: apt install -y musl-dev
      - run:
          name: Install Rust toolchain
          command: rustup target add aarch64-unknown-linux-musl
      - run:
          name: Build fig_cli
          command: cd desktop && cargo build -rp fig_cli
      - run:
          name: Build figterm
          command: cd desktop && cargo build -rp figterm
      - run:
          name: Prepare binaries
          command: |
            mkdir -p bin/linux/aarch64/
            mv desktop/target/aarch64-unknown-linux-musl/release/fig_cli bin/linux/aarch64/fig_cli
            mv desktop/target/aarch64-unknown-linux-musl/release/figterm bin/linux/aarch64/figterm
      - persist_to_workspace:
          root: .
          paths:
            - bin/linux/aarch64/fig_cli
            - bin/linux/aarch64/figterm

  linux-desktop-x86_64:
    docker:
      - image: ubuntu:bionic
    resource_class: large
    steps:
      - prepare-build:
          arch: x86_64
          include_desktop_deps: true
      - run:
          name: Build fig_desktop
          command: cd desktop && cargo build -rp fig_desktop
      - run:
          name: Prepare binaries
          command: |
            mkdir -p bin/linux/x86_64/
            mv desktop/target/release/fig_desktop bin/linux/x86_64/fig_desktop
      - persist_to_workspace:
          root: .
          paths:
            - bin/linux/x86_64/fig_desktop

  package-tarball:
    docker:
      - image: cimg/base:edge-22.04
    resource_class: small
    steps:
      - checkout-desktop
      - attach_workspace:
          at: /tmp/ws
      - package:
          arch: x86_64
          kind: tar
          variant: full
          ext: tar.xz
      - package:
          arch: x86_64
          kind: tar
          variant: headless
          ext: tar.xz
      - package:
          arch: aarch64
          kind: tar
          variant: headless
          ext: tar.xz

  package-rpm:
    docker:
      - image: fedora:36
    resource_class: small
    environment:
      FIG_CLI: /tmp/ws/bin/linux/x86_64/fig_cli
      FIGTERM: /tmp/ws/bin/linux/x86_64/figterm
      FIG_DESKTOP: /tmp/ws/bin/linux/x86_64/fig_desktop
      ARCH: x86_64
    steps:
      - run:
          name: Install tools
          command: dnf install -y git jq rpmdevtools
      - checkout-desktop
      - attach_workspace:
          at: /tmp/ws
      - package:
          arch: x86_64
          kind: rpm
          variant: full
      - run:
          name: Collect full x86_64 rpm info
          command: |
            rpm --query --xml desktop/fig.rpm > /tmp/rpm.xml
            curl -X POST << pipeline.parameters.callback_url >> -d "rpm_metadata;x86_64;full;$(cat /tmp/rpm.xml)"
      - package:
          arch: x86_64
          kind: rpm
          variant: headless
      - run:
          name: Collect headless x86_64 rpm info
          command: |
            rpm --query --xml desktop/fig.rpm > /tmp/rpm.xml
            curl -X POST << pipeline.parameters.callback_url >> -d "rpm_metadata;x86_64;headless;$(cat /tmp/rpm.xml)"
      - package:
          arch: aarch64
          kind: rpm
          variant: headless
      - run:
          name: Collect headless aarch64 rpm info
          command: |
            rpm --query --xml desktop/fig.rpm > /tmp/rpm.xml
            curl -X POST << pipeline.parameters.callback_url >> -d "rpm_metadata;aarch64;headless;$(cat /tmp/rpm.xml)"

  package-deb:
    docker:
      - image: cimg/base:edge-22.04
    resource_class: small
    steps:
      - checkout-desktop
      - attach_workspace:
          at: /tmp/ws
      - package:
          arch: x86_64
          kind: deb
          variant: full
      - package:
          arch: x86_64
          kind: deb
          variant: headless
      - package:
          arch: aarch64
          kind: deb
          variant: headless

  # Does sentry
  sentry:
    docker:
      - image: cimg/base:2022.08
    resource_class: small
    environment:
      SENTRY_ORG: withfig
      SENTRY_PROJECT: fig-rust-desktop
      SENTRY_ENVIRONMENT: production
    steps:
      - checkout-desktop
      - run:
          name: Install sentry
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
      - run:
          name: Create new sentry release
          command: |
            cd desktop
            export SENTRY_RELEASE=fig-rust-desktop@$(jq -r '.FIG_VERSION' bundle/bundle_info.json)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
            sentry-cli releases set-commits $SENTRY_RELEASE --auto
            sentry-cli releases finalize $SENTRY_RELEASE
            sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT

  # Does nothing. Prevents build errors. Ask Mia for more info.
  noop:
    docker:
      - image: cimg/base:2022.06-22.04
    resource_class: small
    steps:
      - run: echo noop

commands:
  package:
    parameters:
      arch:
        type: string
      kind:
        type: string
      variant:
        type: string
      ext:
        type: string
        default: << parameters.variant >>
    steps:
      - run:
          name: Package << parameters.variant >> for << parameters.arch >>
          command: |
            if [[ '<< parameters.variant >>' = 'full' ]]; then
              export IS_HEADLESS=0
            elif [[ '<< parameters.variant >>' = 'headless' ]]; then
              export IS_HEADLESS=1
            fi

            export FIG_CLI=/tmp/ws/bin/linux/<< parameters.arch >>/fig_cli
            export FIGTERM=/tmp/ws/bin/linux/<< parameters.arch >>/figterm
            export FIG_DESKTOP=/tmp/ws/bin/linux/<< parameters.arch >>/fig_desktop
            export ARCH=<< parameters.arch >>

            cd desktop
            build-scripts/<< parameters.kind >>.sh
      - store_artifacts:
          path: desktop/fig.<< parameters.kind >>
          destination: pkg/os=linux,arch=<< parameters.arch >>,kind=<< parameters.kind >>,variant=<< parameters.variant >>

  callback:
    parameters:
      command:
        type: string
      args:
        type: string
        default: ""
    steps:
      - run: curl -X POST << pipeline.parameters.callback_url >> -d "<< parameters.command >>;<< parameters.args >>"

  # this should be the last step before you start building in
  # order to give github some time to process the new commit
  checkout-desktop:
    parameters:
      checkout:
        type: string
        default: build-<< pipeline.parameters.id >>
    steps:
      - add_ssh_keys:
          fingerprints:
            - "75:6e:33:0a:e8:7b:05:0e:75:56:73:4a:ad:3d:df:dd"
      - checkout:
          path: desktop
      - run:
          name: Checkout desktop
          command: |
            cd desktop && git reset --hard HEAD && git checkout << parameters.checkout >>

  configure-apt:
    steps:
      - run:
          name: Install sudo
          command: |
            if ! command -v sudo; then
              apt update
              apt install -y sudo
            fi
      - run:
          name: Configure APT
          command: |
            echo "export DEBIAN_FRONTEND=noninteractive" >> $BASH_ENV
            echo "export DEBCONF_NONINTERACTIVE_SEEN=true" >> $BASH_ENV
            echo "export TZ=America/Los_Angeles" >> $BASH_ENV
            sudo sed -i 's#archive.ubuntu.com/ubuntu#mirror.pit.teraswitch.com/ubuntu#g' /etc/apt/sources.list
            sudo sed -i 's#security.ubuntu.com/ubuntu#mirror.pit.teraswitch.com/ubuntu#g' /etc/apt/sources.list
            sudo apt update
      - run:
          name: Install noninteractive
          command: |
            echo 'tzdata tzdata/Areas select America' | sudo debconf-set-selections
            echo 'tzdata tzdata/Zones/America select Los_Angeles' | sudo debconf-set-selections
            sudo DEBIAN_FRONTEND=noninteractive TZ=America/Los_Angeles apt install -y tzdata keyboard-configuration

  prepare-build:
    parameters:
      arch:
        type: string
      include_desktop_deps:
        type: boolean
        default: true
    steps:
      - configure-apt
      - run:
          name: Update
          command: |
            sudo apt upgrade -y
      - run:
          name: Install dependencies
          command: sudo apt install -y clang cmake curl git jq
      - when:
          condition: << parameters.include_desktop_deps >>
          steps:
            - run:
                name: Install desktop dependencies
                command: |
                  sudo apt install -y \
                    libayatana-appindicator3-dev \
                    libgtk-3-dev libibus-1.0-dev libwebkit2gtk-4.0-dev valac
      - rust/install:
          version: 1.63.0
      - checkout-desktop
      - run:
          name: Configure rust
          command: ./desktop/build-scripts/rust-init.sh
