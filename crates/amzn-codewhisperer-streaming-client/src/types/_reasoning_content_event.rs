// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Streaming Response Event for reasoning content.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ReasoningContentEvent {
    /// The reasoning that the model used to return the output.
    pub text: ::std::option::Option<::std::string::String>,
    /// The content in the reasoning that was encrypted by the model provider
    pub redacted_content: ::std::option::Option<::aws_smithy_types::Blob>,
    /// A token that verifies that the reasoning text was generated by the model
    pub signature: ::std::option::Option<::std::string::String>,
}
impl ReasoningContentEvent {
    /// The reasoning that the model used to return the output.
    pub fn text(&self) -> ::std::option::Option<&str> {
        self.text.as_deref()
    }

    /// The content in the reasoning that was encrypted by the model provider
    pub fn redacted_content(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.redacted_content.as_ref()
    }

    /// A token that verifies that the reasoning text was generated by the model
    pub fn signature(&self) -> ::std::option::Option<&str> {
        self.signature.as_deref()
    }
}
impl ::std::fmt::Debug for ReasoningContentEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ReasoningContentEvent");
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.field("redacted_content", &"*** Sensitive Data Redacted ***");
        formatter.field("signature", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ReasoningContentEvent {
    /// Creates a new builder-style object to manufacture
    /// [`ReasoningContentEvent`](crate::types::ReasoningContentEvent).
    pub fn builder() -> crate::types::builders::ReasoningContentEventBuilder {
        crate::types::builders::ReasoningContentEventBuilder::default()
    }
}

/// A builder for [`ReasoningContentEvent`](crate::types::ReasoningContentEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ReasoningContentEventBuilder {
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) redacted_content: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) signature: ::std::option::Option<::std::string::String>,
}
impl ReasoningContentEventBuilder {
    /// The reasoning that the model used to return the output.
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }

    /// The reasoning that the model used to return the output.
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }

    /// The reasoning that the model used to return the output.
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }

    /// The content in the reasoning that was encrypted by the model provider
    pub fn redacted_content(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.redacted_content = ::std::option::Option::Some(input);
        self
    }

    /// The content in the reasoning that was encrypted by the model provider
    pub fn set_redacted_content(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.redacted_content = input;
        self
    }

    /// The content in the reasoning that was encrypted by the model provider
    pub fn get_redacted_content(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.redacted_content
    }

    /// A token that verifies that the reasoning text was generated by the model
    pub fn signature(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.signature = ::std::option::Option::Some(input.into());
        self
    }

    /// A token that verifies that the reasoning text was generated by the model
    pub fn set_signature(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.signature = input;
        self
    }

    /// A token that verifies that the reasoning text was generated by the model
    pub fn get_signature(&self) -> &::std::option::Option<::std::string::String> {
        &self.signature
    }

    /// Consumes the builder and constructs a
    /// [`ReasoningContentEvent`](crate::types::ReasoningContentEvent).
    pub fn build(self) -> crate::types::ReasoningContentEvent {
        crate::types::ReasoningContentEvent {
            text: self.text,
            redacted_content: self.redacted_content,
            signature: self.signature,
        }
    }
}
impl ::std::fmt::Debug for ReasoningContentEventBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ReasoningContentEventBuilder");
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.field("redacted_content", &"*** Sensitive Data Redacted ***");
        formatter.field("signature", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
