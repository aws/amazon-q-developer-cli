{
  "dummy": {
    "name": "dummy",
    "description": "This is a dummy tool. If you are seeing this that means the tool associated with this tool call is not in the list of available tools. This could be because a wrong tool name was supplied or the list of tools has changed since the conversation has started. Do not show this when user asks you to list tools.",
    "input_schema": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  "execute_bash": {
    "name": "execute_bash",
    "description": "Execute the specified bash command.",
    "input_schema": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "description": "Bash command to execute"
        },
        "summary": {
          "type": "string",
          "description": "A brief explanation of what the command does"
        }
      },
      "required": ["command"]
    }
  },
  "fs_read": {
    "name": "fs_read",
    "description": "Tool for reading files, directories, and images with support for multiple operations in a single call. Each operation can have its own mode and parameters.\n\nAvailable modes for operations:\n- Line: Show lines in a file, given by an optional `start_line` and optional `end_line`\n- Directory: List directory contents in the \"long format\" of ls (that is, `ls -la`)\n- Search: Search for a pattern in a file (case insensitive)\n- Image: Display images from the specified paths\n\nExample Usage:\n```json\n{\n  \"operations\": [\n    {\n      \"mode\": \"Line\",\n      \"path\": \"/path/to/file1.txt\",\n      \"start_line\": 10,\n      \"end_line\": 20\n    },\n    {\n      \"mode\": \"Search\",\n      \"path\": \"/path/to/file2.txt\",\n      \"pattern\": \"important term\"\n    },\n    {\n      \"mode\": \"Directory\",\n      \"path\": \"/path/to/directory\",\n      \"depth\": 1\n    },\n    {\n      \"mode\": \"Image\",\n      \"image_paths\": [\"/path/to/image1.png\", \"/path/to/image2.jpg\"]\n    }\n  ]\n}\n```\n\nResponse format:\n- For a single operation, returns the content directly\n- For multiple operations, returns an array of results with path, success status, content, content_hash, and last_modified timestamp\n",
    "input_schema": {
      "type": "object",
      "properties": {
        "operations": {
          "description": "Array of operations to perform in a single call.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "mode": {
                "type": "string",
                "enum": [
                  "Line",
                  "Directory",
                  "Search",
                  "Image"
                ],
                "description": "The mode for this operation: `Line`, `Directory`, `Search`, or `Image`."
              },
              "path": {
                "description": "Path to the file or directory for this operation.",
                "type": "string"
              },
              "image_paths": {
                "description": "List of paths to the images for Image mode.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "start_line": {
                "type": "integer",
                "description": "Starting line number for Line mode.",
                "default": 1
              },
              "end_line": {
                "type": "integer",
                "description": "Ending line number for Line mode.",
                "default": -1
              },
              "pattern": {
                "type": "string",
                "description": "Pattern to search for in Search mode."
              },
              "context_lines": {
                "type": "integer",
                "description": "Number of context lines around search results in Search mode.",
                "default": 2
              },
              "depth": {
                "type": "integer",
                "description": "Depth of a recursive directory listing in Directory mode.",
                "default": 0
              }
            },
            "required": ["mode"],
            "oneOf": [
              { 
                "properties": { "mode": { "enum": ["Line", "Directory", "Search"] } },
                "required": ["path"]
              },
              { 
                "properties": { "mode": { "enum": ["Image"] } },
                "required": ["image_paths"]
              }
            ]
          }
        }
      },
      "required": ["operations"]
    }
  },
  "fs_write": {
    "name": "fs_write",
    "description": "A tool for creating and editing files with batch operations support.\n\nSupports multiple edits per file using the `file_edits` parameter, with edits applied from the end of the file to the beginning to avoid line number issues.\n\nAvailable commands for each edit:\n* `create`: Create a new file or override an existing file\n* `str_replace`: Replace a specific string in a file\n* `insert`: Insert content after a specific line\n* `append`: Add content to the end of a file\n* `replace_lines`: Replace a range of lines in a file\n\nNotes for using the `str_replace` command:\n* The `old_str` parameter should match EXACTLY one or more consecutive lines from the original file\n* If the `old_str` parameter is not unique in the file, the replacement will not be performed\n* The `new_str` parameter should contain the edited lines that should replace the `old_str`\n\nExample Usage:\n```json\n{\n  \"file_edits\": [\n    {\n      \"path\": \"/path/to/file1.txt\",\n      \"edits\": [\n        {\n          \"command\": \"str_replace\",\n          \"old_str\": \"function hello() {\\n  console.log('Hello');\\n}\",\n          \"new_str\": \"function hello() {\\n  console.log('Hello World');\\n}\"\n        },\n        {\n          \"command\": \"replace_lines\",\n          \"start_line\": 10,\n          \"end_line\": 15,\n          \"new_str\": \"// These lines were replaced\"\n        }\n      ]\n    },\n    {\n      \"path\": \"/path/to/file2.txt\",\n      \"edits\": [\n        {\n          \"command\": \"append\",\n          \"new_str\": \"// Appended content\"\n        }\n      ]\n    }\n  ]\n}\n```\n\nResponse format:\n- Returns an array of results with path, success status, edits applied, and any errors",
    "input_schema": {
      "type": "object",
      "properties": {
        "file_edits": {
          "description": "Array of file edit operations to perform in batch. Each object must include path and an array of edits to apply to that file.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "path": {
                "description": "Absolute path to file, e.g. `/repo/file.py`.",
                "type": "string"
              },
              "edits": {
                "description": "Array of edit operations to apply to this file. Edits will be applied from the end of the file to the beginning to avoid line number issues.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "command": {
                      "description": "The command for this edit.",
                      "enum": ["create", "str_replace", "insert", "append", "replace_lines"],
                      "type": "string"
                    },
                    "file_text": {
                      "description": "Required parameter of `create` command, with the content of the file to be created.",
                      "type": "string"
                    },
                    "old_str": {
                      "description": "Required parameter of `str_replace` command containing the string in `path` to replace.",
                      "type": "string"
                    },
                    "new_str": {
                      "description": "Required parameter of `str_replace`, `insert`, `append`, and `replace_lines` commands containing the new content.",
                      "type": "string"
                    },
                    "insert_line": {
                      "description": "Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.",
                      "type": "integer"
                    },
                    "start_line": {
                      "description": "Required parameter of `replace_lines` command. The starting line number to replace (inclusive).",
                      "type": "integer"
                    },
                    "end_line": {
                      "description": "Required parameter of `replace_lines` command. The ending line number to replace (inclusive).",
                      "type": "integer"
                    }
                  },
                  "required": ["command"],
                  "allOf": [
                    {
                      "if": {
                        "properties": { "command": { "enum": ["create"] } }
                      },
                      "then": {
                        "required": ["file_text"]
                      }
                    },
                    {
                      "if": {
                        "properties": { "command": { "enum": ["str_replace"] } }
                      },
                      "then": {
                        "required": ["old_str", "new_str"]
                      }
                    },
                    {
                      "if": {
                        "properties": { "command": { "enum": ["insert"] } }
                      },
                      "then": {
                        "required": ["insert_line", "new_str"]
                      }
                    },
                    {
                      "if": {
                        "properties": { "command": { "enum": ["append"] } }
                      },
                      "then": {
                        "required": ["new_str"]
                      }
                    },
                    {
                      "if": {
                        "properties": { "command": { "enum": ["replace_lines"] } }
                      },
                      "then": {
                        "required": ["start_line", "end_line", "new_str"]
                      }
                    }
                  ]
                }
              }
            },
            "required": ["path", "edits"]
          }
        }
      },
      "required": ["file_edits"]
    }
  },
  "use_aws": {
    "name": "use_aws",
    "description": "Make an AWS CLI api call with the specified service, operation, and parameters. All arguments MUST conform to the AWS CLI specification. Should the output of the invocation indicate a malformed command, invoke help to obtain the the correct command.",
    "input_schema": {
      "type": "object",
      "properties": {
        "service_name": {
          "type": "string",
          "description": "The name of the AWS service. If you want to query s3, you should use s3api if possible."
        },
        "operation_name": {
          "type": "string",
          "description": "The name of the operation to perform."
        },
        "parameters": {
          "type": "object",
          "description": "The parameters for the operation. The parameter keys MUST conform to the AWS CLI specification. You should prefer to use JSON Syntax over shorthand syntax wherever possible. For parameters that are booleans, prioritize using flags with no value. Denote these flags with flag names as key and an empty string as their value. You should also prefer kebab case."
        },
        "region": {
          "type": "string",
          "description": "Region name for calling the operation on AWS."
        },
        "profile_name": {
          "type": "string",
          "description": "Optional: AWS profile name to use from ~/.aws/credentials. Defaults to default profile if not specified."
        },
        "label": {
          "type": "string",
          "description": "Human readable description of the api that is being called."
        }
      },
      "required": ["region", "service_name", "operation_name", "label"]
    }
  },
  "gh_issue": {
    "name": "report_issue",
    "description": "Opens the browser to a pre-filled gh (GitHub) issue template to report chat issues, bugs, or feature requests. Pre-filled information includes the conversation transcript, chat context, and chat request IDs from the service.",
    "input_schema": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title of the GitHub issue."
        },
        "expected_behavior": {
          "type": "string",
          "description": "Optional: The expected chat behavior or action that did not happen."
        },
        "actual_behavior": {
          "type": "string",
          "description": "Optional: The actual chat behavior that happened and demonstrates the issue or lack of a feature."
        },
        "steps_to_reproduce": {
          "type": "string",
          "description": "Optional: Previous user chat requests or steps that were taken that may have resulted in the issue or error response."
        }
      },
      "required": ["title"]
    }
  },
  "thinking": {
    "name": "thinking",
    "description": "Thinking is an internal reasoning mechanism improving the quality of complex tasks by breaking their atomic actions down; use it specifically for multi-step problems requiring step-by-step dependencies, reasoning through multiple constraints, synthesizing results from previous tool calls, planning intricate sequences of actions, troubleshooting complex errors, or making decisions involving multiple trade-offs. Avoid using it for straightforward tasks, basic information retrieval, summaries, always clearly define the reasoning challenge, structure thoughts explicitly, consider multiple perspectives, and summarize key insights before important decisions or complex tool interactions.",
    "input_schema": {
      "type": "object",
      "properties": {
        "thought": {
          "type": "string",
          "description": "A reflective note or intermediate reasoning step such as \"The user needs to prepare their application for production. I need to complete three major asks including 1: building their code from source, 2: bundling their release artifacts together, and 3: signing the application bundle."
        }
      },
      "required": ["thought"]
    }
  }
}
