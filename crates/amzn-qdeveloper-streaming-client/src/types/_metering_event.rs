// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Streaming Response Event for Metering
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MeteringEvent {
    #[allow(missing_docs)] // documentation missing in model
    pub usage: ::std::option::Option<f64>,
    #[allow(missing_docs)] // documentation missing in model
    pub unit: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub unit_plural: ::std::option::Option<::std::string::String>,
}
impl MeteringEvent {
    #[allow(missing_docs)] // documentation missing in model
    pub fn usage(&self) -> ::std::option::Option<f64> {
        self.usage
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn unit(&self) -> ::std::option::Option<&str> {
        self.unit.as_deref()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn unit_plural(&self) -> ::std::option::Option<&str> {
        self.unit_plural.as_deref()
    }
}
impl MeteringEvent {
    /// Creates a new builder-style object to manufacture
    /// [`MeteringEvent`](crate::types::MeteringEvent).
    pub fn builder() -> crate::types::builders::MeteringEventBuilder {
        crate::types::builders::MeteringEventBuilder::default()
    }
}

/// A builder for [`MeteringEvent`](crate::types::MeteringEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MeteringEventBuilder {
    pub(crate) usage: ::std::option::Option<f64>,
    pub(crate) unit: ::std::option::Option<::std::string::String>,
    pub(crate) unit_plural: ::std::option::Option<::std::string::String>,
}
impl MeteringEventBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn usage(mut self, input: f64) -> Self {
        self.usage = ::std::option::Option::Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_usage(mut self, input: ::std::option::Option<f64>) -> Self {
        self.usage = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_usage(&self) -> &::std::option::Option<f64> {
        &self.usage
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn unit(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.unit = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_unit(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.unit = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_unit(&self) -> &::std::option::Option<::std::string::String> {
        &self.unit
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn unit_plural(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.unit_plural = ::std::option::Option::Some(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_unit_plural(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.unit_plural = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_unit_plural(&self) -> &::std::option::Option<::std::string::String> {
        &self.unit_plural
    }

    /// Consumes the builder and constructs a [`MeteringEvent`](crate::types::MeteringEvent).
    pub fn build(self) -> crate::types::MeteringEvent {
        crate::types::MeteringEvent {
            usage: self.usage,
            unit: self.unit,
            unit_plural: self.unit_plural,
        }
    }
}
