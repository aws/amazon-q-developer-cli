// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The entire reasoning content that the model used to return the output
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub enum ReasoningContent {
    #[allow(missing_docs)] // documentation missing in model
    ReasoningText(crate::types::ReasoningText),
    /// Reasoning content that was encrypted by the model provider
    RedactedContent(::aws_smithy_types::Blob),
    /// The `Unknown` variant represents cases where new union variant was received. Consider
    /// upgrading the SDK to the latest available version. An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has
    /// not been updated. To investigate this, consider turning on debug logging to print the
    /// raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ReasoningContent {
    /// Tries to convert the enum instance into
    /// [`ReasoningText`](crate::types::ReasoningContent::ReasoningText), extracting the inner
    /// [`ReasoningText`](crate::types::ReasoningText). Returns `Err(&Self)` if it can't be
    /// converted.
    pub fn as_reasoning_text(&self) -> ::std::result::Result<&crate::types::ReasoningText, &Self> {
        if let ReasoningContent::ReasoningText(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }

    /// Returns true if this is a [`ReasoningText`](crate::types::ReasoningContent::ReasoningText).
    pub fn is_reasoning_text(&self) -> bool {
        self.as_reasoning_text().is_ok()
    }

    /// Tries to convert the enum instance into
    /// [`RedactedContent`](crate::types::ReasoningContent::RedactedContent), extracting the inner
    /// [`Blob`](::aws_smithy_types::Blob). Returns `Err(&Self)` if it can't be converted.
    pub fn as_redacted_content(&self) -> ::std::result::Result<&::aws_smithy_types::Blob, &Self> {
        if let ReasoningContent::RedactedContent(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }

    /// Returns true if this is a
    /// [`RedactedContent`](crate::types::ReasoningContent::RedactedContent).
    pub fn is_redacted_content(&self) -> bool {
        self.as_redacted_content().is_ok()
    }

    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
impl ::std::fmt::Debug for ReasoningContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::std::write!(f, "*** Sensitive Data Redacted ***")
    }
}
