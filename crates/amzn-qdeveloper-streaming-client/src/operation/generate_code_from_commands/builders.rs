// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::generate_code_from_commands::_generate_code_from_commands_input::GenerateCodeFromCommandsInputBuilder;
pub use crate::operation::generate_code_from_commands::_generate_code_from_commands_output::GenerateCodeFromCommandsOutputBuilder;

impl crate::operation::generate_code_from_commands::builders::GenerateCodeFromCommandsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::generate_code_from_commands::GenerateCodeFromCommandsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::generate_code_from_commands::GenerateCodeFromCommandsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.generate_code_from_commands();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GenerateCodeFromCommands`.
///
/// API to generate infrastructure as code from cli commands.
///
/// [`GenerateCodeFromCommandsOutput`](crate::operation::generate_code_from_commands::GenerateCodeFromCommandsOutput) contains an event stream field as well as one or more non-event stream fields.
/// Due to its current implementation, the non-event stream fields are not fully deserialized
/// until the [`send`](Self::send) method completes. As a result, accessing these fields of the
/// operation output struct within an interceptor may return uninitialized values.
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GenerateCodeFromCommandsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::generate_code_from_commands::builders::GenerateCodeFromCommandsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::generate_code_from_commands::GenerateCodeFromCommandsOutput,
        crate::operation::generate_code_from_commands::GenerateCodeFromCommandsError,
    > for GenerateCodeFromCommandsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::generate_code_from_commands::GenerateCodeFromCommandsOutput,
            crate::operation::generate_code_from_commands::GenerateCodeFromCommandsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GenerateCodeFromCommandsFluentBuilder {
    /// Creates a new `GenerateCodeFromCommandsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }

    /// Access the GenerateCodeFromCommands as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::generate_code_from_commands::builders::GenerateCodeFromCommandsInputBuilder {
        &self.inner
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::generate_code_from_commands::GenerateCodeFromCommandsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::generate_code_from_commands::GenerateCodeFromCommandsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::generate_code_from_commands::GenerateCodeFromCommands::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        let mut output = crate::operation::generate_code_from_commands::GenerateCodeFromCommands::orchestrate(
            &runtime_plugins,
            input,
        )
        .await?;

        // Converts any error encountered beyond this point into an `SdkError` response error
        // with an `HttpResponse`. However, since we have already exited the `orchestrate`
        // function, the original `HttpResponse` is no longer available and cannot be restored.
        // This means that header information from the original response has been lost.
        //
        // Note that the response body would have been consumed by the deserializer
        // regardless, even if the initial message was hypothetically processed during
        // the orchestrator's deserialization phase but later resulted in an error.
        fn response_error(
            err: impl ::std::convert::Into<::aws_smithy_runtime_api::box_error::BoxError>,
        ) -> ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::generate_code_from_commands::GenerateCodeFromCommandsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        > {
            ::aws_smithy_runtime_api::client::result::SdkError::response_error(
                err,
                ::aws_smithy_runtime_api::client::orchestrator::HttpResponse::new(
                    ::aws_smithy_runtime_api::http::StatusCode::try_from(200).expect("valid successful code"),
                    ::aws_smithy_types::body::SdkBody::empty(),
                ),
            )
        }

        let message = output
            .generated_code_from_commands_response
            .try_recv_initial_response()
            .await
            .map_err(response_error)?;

        match message {
            ::std::option::Option::Some(_message) => ::std::result::Result::Ok(output),
            ::std::option::Option::None => ::std::result::Result::Ok(output),
        }
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::generate_code_from_commands::GenerateCodeFromCommandsOutput,
        crate::operation::generate_code_from_commands::GenerateCodeFromCommandsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }

    pub(crate) fn config_override(
        mut self,
        config_override: impl ::std::convert::Into<crate::config::Builder>,
    ) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(
        &mut self,
        config_override: ::std::option::Option<crate::config::Builder>,
    ) -> &mut Self {
        self.config_override = config_override;
        self
    }

    /// Format of the output - language/format eg. typescript/cdk
    pub fn output_format(mut self, input: crate::types::OutputFormat) -> Self {
        self.inner = self.inner.output_format(input);
        self
    }

    /// Format of the output - language/format eg. typescript/cdk
    pub fn set_output_format(mut self, input: ::std::option::Option<crate::types::OutputFormat>) -> Self {
        self.inner = self.inner.set_output_format(input);
        self
    }

    /// Format of the output - language/format eg. typescript/cdk
    pub fn get_output_format(&self) -> &::std::option::Option<crate::types::OutputFormat> {
        self.inner.get_output_format()
    }

    /// CommandInput can be extended to either a list of strings or a single string.
    pub fn commands(mut self, input: crate::types::CommandInput) -> Self {
        self.inner = self.inner.commands(input);
        self
    }

    /// CommandInput can be extended to either a list of strings or a single string.
    pub fn set_commands(mut self, input: ::std::option::Option<crate::types::CommandInput>) -> Self {
        self.inner = self.inner.set_commands(input);
        self
    }

    /// CommandInput can be extended to either a list of strings or a single string.
    pub fn get_commands(&self) -> &::std::option::Option<crate::types::CommandInput> {
        self.inner.get_commands()
    }
}
