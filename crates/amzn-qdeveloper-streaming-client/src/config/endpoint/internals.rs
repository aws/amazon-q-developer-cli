// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(
    clippy::collapsible_if,
    clippy::bool_comparison,
    clippy::nonminimal_bool,
    clippy::comparison_to_empty,
    clippy::redundant_pattern_matching,
    clippy::useless_asref
)]
pub(super) fn resolve_endpoint(
    _params: &crate::config::endpoint::Params,
    _diagnostic_collector: &mut crate::endpoint_lib::diagnostic::DiagnosticCollector,
) -> ::aws_smithy_http::endpoint::Result {
    #[allow(unused_variables)]
    let endpoint = &_params.endpoint;
    #[allow(unused_variables)]
    let region = &_params.region;
    #[allow(unused_variables)]
    if let Some(endpoint) = endpoint {
        return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
            .url(endpoint.to_owned())
            .property("authSchemes", vec![::aws_smithy_types::Document::from({
                let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                out.insert("name".to_string(), "sigv4".to_string().into());
                out.insert("signingRegion".to_string(), region.to_owned().into());
                out
            })])
            .build());
    }
    return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
        .url({
            let mut out = String::new();
            out.push_str("https://q.");
            #[allow(clippy::needless_borrow)]
            out.push_str(&region.as_ref() as &str);
            out.push_str(".amazonaws.com");
            out
        })
        .property("authSchemes", vec![::aws_smithy_types::Document::from({
            let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
            out.insert("name".to_string(), "sigv4".to_string().into());
            out.insert("signingRegion".to_string(), region.to_owned().into());
            out
        })])
        .build());
}
