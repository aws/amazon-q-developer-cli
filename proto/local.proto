syntax = "proto3";

option objc_class_prefix = "FIG";
option go_package = "fig_proto";

package local;

message LocalMessage {
	oneof type {
		Command command = 2; // expect a response from the host app
		Hook hook = 3; // one way update only, no response expected
	}
}

message Command {
	optional int64 id = 1;
	optional bool no_response = 2; // opt-out of response from host app

	oneof command {
		TerminalIntegrationCommand terminal_integration = 100;
		ListTerminalIntegrationsCommand list_terminal_integrations = 101;
		LogoutCommand logout = 102;
		RestartCommand restart = 103;
		QuitCommand quit = 104;
		UpdateCommand update = 105;
		DiagnosticsCommand diagnostics = 106;
		ReportWindowCommand report_window = 107;
		RestartSettingsListenerCommand restart_settings_listener = 108;
		RunInstallScriptCommand run_install_script = 109;
		BuildCommand build = 110;
		OpenUiElementCommand open_ui_element = 111;
		ResetCacheCommand reset_cache = 112;
		DebugModeCommand debug_mode = 113;
		PromptAccessibilityCommand prompt_accessibility = 114;
		InputMethodCommand input_method = 115;

	}
}

message Hook {
	oneof hook {
		EditBufferHook edit_buffer = 100;
		InitHook init = 101;
		PromptHook prompt = 102;
		PreExecHook pre_exec = 103;
		PostExecHook post_exec = 104;
		KeyboardFocusChangedHook keyboard_focus_changed = 105;
		TmuxPaneChangedHook tmux_pane_changed = 106;
		OpenedSSHConnectionHook opened_ssh_connection = 107;
		CallbackHook callback = 108;
		IntegrationReadyHook integration_ready = 109;
		HideHook hide = 110;
		EventHook event = 111;
	}
}

// == Commands ==
enum IntegrationAction {
	INSTALL = 0;
	VERIFY_INSTALL = 1;
	UNINSTALL = 2;
}

message TerminalIntegrationCommand {
	string identifier = 1;
	IntegrationAction action = 2;
}

message ListTerminalIntegrationsCommand { }

message LogoutCommand { }

message RestartCommand { }

message QuitCommand { }

message UpdateCommand {
	bool force = 1;
}

message DiagnosticsCommand {}

message ReportWindowCommand {
	string report = 1;
	string path = 2;
	string fig_env_var = 3;
	string terminal = 4;
}

message RestartSettingsListenerCommand {}

message RunInstallScriptCommand {}

message BuildCommand {
	optional string branch = 1;
}

enum UiElement {
	MENU_BAR = 0;
	SETTINGS = 1;
}

message OpenUiElementCommand {
	UiElement element = 1;
}

message ResetCacheCommand {}

message DebugModeCommand {
	optional bool set_debug_mode = 1; // Set debug mode to true or false
	optional bool toggle_debug_mode = 2; // Toggle debug mode
}

// Note: enum values must be unique
enum InputMethodAction {
	INSTALL_INPUT_METHOD = 0;
	UNINSTALL_INPUT_METHOD = 1;
	ENABLE_INPUT_METHOD = 2;
	DISABLE_INPUT_METHOD = 3;
	SELECT_INPUT_METHOD = 4;
	DESELECT_INPUT_METHOD = 5;
	REGISTER_INPUT_METHOD = 6;
	STATUS_OF_INPUT_METHOD = 7;
}

message InputMethodCommand {
	optional InputMethodAction actions = 1;
}

message PromptAccessibilityCommand {}

// == Hooks ==
message ShellContext {
	optional int32 pid = 1;
	optional string ttys = 2; // /dev/ttys## of terminal session
	optional string process_name = 3; // the name of the process
	optional string current_working_directory = 4; // the directory where the user ran the command
	optional string session_id = 5; // the value of $TERM_SESSION_ID
	optional int32 integration_version = 6;
	optional string terminal = 7;
	optional string hostname = 8;

	optional ShellContext remote_context = 9;
}

message EditBufferHook {
	ShellContext context = 1;

	string text = 2;
	int64 cursor = 3;
	int64 histno = 4;
}

message InitHook {
	ShellContext context = 1;

	bool called_direct = 2;
	string bundle = 3;

	map<string, string> env = 100;
}

message PromptHook {
	ShellContext context = 1;
}

message PreExecHook {
	ShellContext context = 1;

	optional string command = 2; // the full command that was run in the shell
}

message PostExecHook {
	ShellContext context = 1;

	string command = 2; // the full command that was run in the shell
	int32 exit_code = 3; // the exit code of the command
}

message KeyboardFocusChangedHook {
	string app_identifier = 1;
	string focused_session_id = 2; // a unique identifier associated with the pane or tab that is currently focused
}

message TmuxPaneChangedHook {
	int32 pane_identifier = 1;
}

message OpenedSSHConnectionHook {
	ShellContext context = 1;

	string control_path = 2;
}

message CallbackHook {
	string handler_id = 1;
	string filepath = 2;
	string exit_code = 3;
}

message IntegrationReadyHook {
	string identifier = 1;
}

message HideHook { }

message EventHook {
	string event_name = 1;
}

// == Responses ==
message ErrorResponse {
	optional int32 exit_code = 1;
	optional string message = 2;
}

message SuccessResponse {
	optional string message = 1;
}

message TerminalIntegration {
	string bundle_identifier = 1;
	string name = 2;
	optional string status = 3;
}

message TerminalIntegrationsListResponse {
	repeated TerminalIntegration integrations = 1;
}

message DiagnosticsResponse {
	string distribution = 1;
	bool beta = 2;
	bool debug_autocomplete = 3;
	bool developer_mode_enabled = 4;
	string current_layout_name = 5;
	bool is_running_on_read_only_volume = 6;
	string path_to_bundle = 7;
	string accessibility = 8;
	string keypath = 9;
	string docker = 10;
	string symlinked = 11;
	string onlytab = 12;
	string installscript = 13;
	string psudoterminal_path = 14;
	string securekeyboard = 15;
	string securekeyboard_path = 16;
	string current_process = 17;
	string current_window_identifier = 18;
	bool autocomplete = 19;
}

message CommandResponse {
	optional int64 id = 1;
	oneof response {
		ErrorResponse error = 2;
		SuccessResponse success = 3;

		// ... add structured responses for specific commands, as necessary
		TerminalIntegrationsListResponse integration_list = 100;
		DiagnosticsResponse diagnostics = 101;
	}
}
