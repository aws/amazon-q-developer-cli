// @generated by protoc-gen-es v2.2.5 with parameter "target=js+dts,import_extension=js,json_types=false"
// @generated from file mux.proto (package mux, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { EditBufferHook, InterceptedKeyHook, PostExecHook, PreExecHook, PromptHook } from "./local_pb.js";
import type { RunProcessResponse } from "./fig_pb.js";
import type { InsertTextRequest, InterceptRequest, SetBufferRequest } from "./figterm_pb.js";
import type { RunProcessRequest } from "./remote_pb.js";

/**
 * Describes the file mux.proto.
 */
export declare const file_mux: GenFile;

/**
 * @generated from message mux.Packet
 */
export declare type Packet = Message<"mux.Packet"> & {
  /**
   * Version of the packet, currently only 0 is valid
   *
   * @generated from field: uint32 version = 1;
   */
  version: number;

  /**
   * The compression algorithm used for the inner bytes
   *
   * @generated from field: mux.Packet.Compression compression = 2;
   */
  compression: Packet_Compression;

  /**
   * Variable length nonce to ensure message content and length very
   *
   * @generated from field: bytes nonce = 3;
   */
  nonce: Uint8Array;

  /**
   * The inner encoded message
   *
   * @generated from field: bytes inner = 100;
   */
  inner: Uint8Array;
};

/**
 * Describes the message mux.Packet.
 * Use `create(PacketSchema)` to create a new message.
 */
export declare const PacketSchema: GenMessage<Packet>;

/**
 * @generated from enum mux.Packet.Compression
 */
export enum Packet_Compression {
  /**
   * @generated from enum value: COMPRESSION_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: COMPRESSION_NONE = 1;
   */
  NONE = 1,

  /**
   * @generated from enum value: COMPRESSION_GZIP = 2;
   */
  GZIP = 2,
}

/**
 * Describes the enum mux.Packet.Compression.
 */
export declare const Packet_CompressionSchema: GenEnum<Packet_Compression>;

/**
 * @generated from message mux.Ping
 */
export declare type Ping = Message<"mux.Ping"> & {
  /**
   * A message id that the pong will contain
   *
   * @generated from field: string message_id = 1;
   */
  messageId: string;
};

/**
 * Describes the message mux.Ping.
 * Use `create(PingSchema)` to create a new message.
 */
export declare const PingSchema: GenMessage<Ping>;

/**
 * @generated from message mux.Pong
 */
export declare type Pong = Message<"mux.Pong"> & {
  /**
   * The message id from the ping
   *
   * @generated from field: string message_id = 1;
   */
  messageId: string;
};

/**
 * Describes the message mux.Pong.
 * Use `create(PongSchema)` to create a new message.
 */
export declare const PongSchema: GenMessage<Pong>;

/**
 * @generated from message mux.Hostbound
 */
export declare type Hostbound = Message<"mux.Hostbound"> & {
  /**
   * @generated from oneof mux.Hostbound.submessage
   */
  submessage: {
    /**
     * @generated from field: mux.Hostbound.Request request = 100;
     */
    value: Hostbound_Request;
    case: "request";
  } | {
    /**
     * @generated from field: mux.Hostbound.Response response = 101;
     */
    value: Hostbound_Response;
    case: "response";
  } | {
    /**
     * @generated from field: mux.Pong pong = 103;
     */
    value: Pong;
    case: "pong";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message mux.Hostbound.
 * Use `create(HostboundSchema)` to create a new message.
 */
export declare const HostboundSchema: GenMessage<Hostbound>;

/**
 * @generated from message mux.Hostbound.Request
 */
export declare type Hostbound_Request = Message<"mux.Hostbound.Request"> & {
  /**
   * The session id of the figterm instance the message originated from
   *
   * @generated from field: string session_id = 1;
   */
  sessionId: string;

  /**
   * A message id that all responses will share
   *
   * @generated from field: string message_id = 2;
   */
  messageId: string;

  /**
   * @generated from oneof mux.Hostbound.Request.inner
   */
  inner: {
    /**
     * @generated from field: local.EditBufferHook edit_buffer = 100;
     */
    value: EditBufferHook;
    case: "editBuffer";
  } | {
    /**
     * @generated from field: local.PromptHook prompt = 101;
     */
    value: PromptHook;
    case: "prompt";
  } | {
    /**
     * @generated from field: local.PreExecHook pre_exec = 102;
     */
    value: PreExecHook;
    case: "preExec";
  } | {
    /**
     * @generated from field: local.PostExecHook post_exec = 103;
     */
    value: PostExecHook;
    case: "postExec";
  } | {
    /**
     * @generated from field: local.InterceptedKeyHook intercepted_key = 104;
     */
    value: InterceptedKeyHook;
    case: "interceptedKey";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message mux.Hostbound.Request.
 * Use `create(Hostbound_RequestSchema)` to create a new message.
 */
export declare const Hostbound_RequestSchema: GenMessage<Hostbound_Request>;

/**
 * @generated from message mux.Hostbound.Response
 */
export declare type Hostbound_Response = Message<"mux.Hostbound.Response"> & {
  /**
   * The session id of the figterm instance the message originated from
   *
   * @generated from field: string session_id = 1;
   */
  sessionId: string;

  /**
   * A message id that all responses will share
   *
   * @generated from field: string message_id = 2;
   */
  messageId: string;

  /**
   * @generated from oneof mux.Hostbound.Response.inner
   */
  inner: {
    /**
     * @generated from field: fig.RunProcessResponse run_process = 100;
     */
    value: RunProcessResponse;
    case: "runProcess";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message mux.Hostbound.Response.
 * Use `create(Hostbound_ResponseSchema)` to create a new message.
 */
export declare const Hostbound_ResponseSchema: GenMessage<Hostbound_Response>;

/**
 * @generated from message mux.Clientbound
 */
export declare type Clientbound = Message<"mux.Clientbound"> & {
  /**
   * @generated from oneof mux.Clientbound.submessage
   */
  submessage: {
    /**
     * @generated from field: mux.Clientbound.Request request = 100;
     */
    value: Clientbound_Request;
    case: "request";
  } | {
    /**
     * @generated from field: mux.Ping ping = 102;
     */
    value: Ping;
    case: "ping";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message mux.Clientbound.
 * Use `create(ClientboundSchema)` to create a new message.
 */
export declare const ClientboundSchema: GenMessage<Clientbound>;

/**
 * @generated from message mux.Clientbound.Request
 */
export declare type Clientbound_Request = Message<"mux.Clientbound.Request"> & {
  /**
   * The session id of the figterm instance the message will be sent to
   *
   * @generated from field: string session_id = 1;
   */
  sessionId: string;

  /**
   * A message id that all responses will share
   *
   * @generated from field: string message_id = 2;
   */
  messageId: string;

  /**
   * @generated from oneof mux.Clientbound.Request.inner
   */
  inner: {
    /**
     * @generated from field: figterm.InterceptRequest intercept = 100;
     */
    value: InterceptRequest;
    case: "intercept";
  } | {
    /**
     * @generated from field: figterm.InsertTextRequest insert_text = 101;
     */
    value: InsertTextRequest;
    case: "insertText";
  } | {
    /**
     * @generated from field: figterm.SetBufferRequest set_buffer = 102;
     */
    value: SetBufferRequest;
    case: "setBuffer";
  } | {
    /**
     * @generated from field: remote.RunProcessRequest run_process = 103;
     */
    value: RunProcessRequest;
    case: "runProcess";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message mux.Clientbound.Request.
 * Use `create(Clientbound_RequestSchema)` to create a new message.
 */
export declare const Clientbound_RequestSchema: GenMessage<Clientbound_Request>;

