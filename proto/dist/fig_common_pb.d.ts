// @generated by protoc-gen-es v2.2.5 with parameter "target=js+dts,import_extension=js,json_types=false"
// @generated from file fig_common.proto (package fig_common, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file fig_common.proto.
 */
export declare const file_fig_common: GenFile;

/**
 * @generated from message fig_common.Empty
 */
export declare type Empty = Message<"fig_common.Empty"> & {
};

/**
 * Describes the message fig_common.Empty.
 * Use `create(EmptySchema)` to create a new message.
 */
export declare const EmptySchema: GenMessage<Empty>;

/**
 * @generated from message fig_common.Duration
 */
export declare type Duration = Message<"fig_common.Duration"> & {
  /**
   * @generated from field: uint64 secs = 1;
   */
  secs: bigint;

  /**
   * @generated from field: uint32 nanos = 2;
   */
  nanos: number;
};

/**
 * Describes the message fig_common.Duration.
 * Use `create(DurationSchema)` to create a new message.
 */
export declare const DurationSchema: GenMessage<Duration>;

/**
 * @generated from message fig_common.Json
 */
export declare type Json = Message<"fig_common.Json"> & {
  /**
   * @generated from oneof fig_common.Json.value
   */
  value: {
    /**
     * @generated from field: fig_common.Empty null = 1;
     */
    value: Empty;
    case: "null";
  } | {
    /**
     * @generated from field: bool bool = 2;
     */
    value: boolean;
    case: "bool";
  } | {
    /**
     * @generated from field: fig_common.Json.Number number = 3;
     */
    value: Json_Number;
    case: "number";
  } | {
    /**
     * @generated from field: string string = 4;
     */
    value: string;
    case: "string";
  } | {
    /**
     * @generated from field: fig_common.Json.Array array = 5;
     */
    value: Json_Array;
    case: "array";
  } | {
    /**
     * @generated from field: fig_common.Json.Object object = 6;
     */
    value: Json_Object;
    case: "object";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message fig_common.Json.
 * Use `create(JsonSchema)` to create a new message.
 */
export declare const JsonSchema: GenMessage<Json>;

/**
 * @generated from message fig_common.Json.Number
 */
export declare type Json_Number = Message<"fig_common.Json.Number"> & {
  /**
   * @generated from oneof fig_common.Json.Number.number
   */
  number: {
    /**
     * @generated from field: uint64 u64 = 1;
     */
    value: bigint;
    case: "u64";
  } | {
    /**
     * @generated from field: sint64 i64 = 2;
     */
    value: bigint;
    case: "i64";
  } | {
    /**
     * @generated from field: double f64 = 3;
     */
    value: number;
    case: "f64";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message fig_common.Json.Number.
 * Use `create(Json_NumberSchema)` to create a new message.
 */
export declare const Json_NumberSchema: GenMessage<Json_Number>;

/**
 * @generated from message fig_common.Json.Array
 */
export declare type Json_Array = Message<"fig_common.Json.Array"> & {
  /**
   * @generated from field: repeated fig_common.Json array = 1;
   */
  array: Json[];
};

/**
 * Describes the message fig_common.Json.Array.
 * Use `create(Json_ArraySchema)` to create a new message.
 */
export declare const Json_ArraySchema: GenMessage<Json_Array>;

/**
 * @generated from message fig_common.Json.Object
 */
export declare type Json_Object = Message<"fig_common.Json.Object"> & {
  /**
   * @generated from field: map<string, fig_common.Json> map = 1;
   */
  map: { [key: string]: Json };
};

/**
 * Describes the message fig_common.Json.Object.
 * Use `create(Json_ObjectSchema)` to create a new message.
 */
export declare const Json_ObjectSchema: GenMessage<Json_Object>;

/**
 * @generated from message fig_common.EnvironmentVariable
 */
export declare type EnvironmentVariable = Message<"fig_common.EnvironmentVariable"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: optional string value = 2;
   */
  value?: string;
};

/**
 * Describes the message fig_common.EnvironmentVariable.
 * Use `create(EnvironmentVariableSchema)` to create a new message.
 */
export declare const EnvironmentVariableSchema: GenMessage<EnvironmentVariable>;

/**
 * @generated from message fig_common.ShellContext
 */
export declare type ShellContext = Message<"fig_common.ShellContext"> & {
  /**
   * pid of the shell
   *
   * @generated from field: optional int32 pid = 1;
   */
  pid?: number;

  /**
   * /dev/ttys## of terminal session
   *
   * @generated from field: optional string ttys = 2;
   */
  ttys?: string;

  /**
   * the name of the process
   *
   * @generated from field: optional string process_name = 3;
   */
  processName?: string;

  /**
   * the directory where the user ran the command
   *
   * @generated from field: optional string current_working_directory = 4;
   */
  currentWorkingDirectory?: string;

  /**
   * the value of $TERM_SESSION_ID
   *
   * @generated from field: optional string session_id = 5;
   */
  sessionId?: string;

  /**
   * the parent terminal of figterm
   *
   * @generated from field: optional string terminal = 7;
   */
  terminal?: string;

  /**
   * the hostname of the computer figterm is running on
   *
   * @generated from field: optional string hostname = 8;
   */
  hostname?: string;

  /**
   * path to the current shell exe
   *
   * @generated from field: optional string shell_path = 10;
   */
  shellPath?: string;

  /**
   * name of the wsl instance
   *
   * @generated from field: optional string wsl_distro = 11;
   */
  wslDistro?: string;

  /**
   * environment variables in the shell
   *
   * @generated from field: repeated fig_common.EnvironmentVariable environment_variables = 13;
   */
  environmentVariables: EnvironmentVariable[];

  /**
   * the version of qterm
   *
   * @generated from field: optional string qterm_version = 14;
   */
  qtermVersion?: string;

  /**
   * true if a command is running
   *
   * @generated from field: optional bool preexec = 15;
   */
  preexec?: boolean;

  /**
   * true if OSCs are locked
   *
   * @generated from field: optional bool osc_lock = 16;
   */
  oscLock?: boolean;

  /**
   * the raw output of `alias` run in the shell
   *
   * @generated from field: optional string alias = 17;
   */
  alias?: string;
};

/**
 * Describes the message fig_common.ShellContext.
 * Use `create(ShellContextSchema)` to create a new message.
 */
export declare const ShellContextSchema: GenMessage<ShellContext>;

/**
 * @generated from message fig_common.FileData
 */
export declare type FileData = Message<"fig_common.FileData"> & {
  /**
   * @generated from oneof fig_common.FileData.data
   */
  data: {
    /**
     * @generated from field: string text = 1;
     */
    value: string;
    case: "text";
  } | {
    /**
     * @generated from field: bytes binary = 2;
     */
    value: Uint8Array;
    case: "binary";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message fig_common.FileData.
 * Use `create(FileDataSchema)` to create a new message.
 */
export declare const FileDataSchema: GenMessage<FileData>;

