syntax = "proto3";
package figterm;

import "fig_common.proto";

// Message type used to send a command to figterm
message FigtermMessage {
    oneof command {
        InterceptCommand intercept_command = 1;
        InsertTextCommand insert_text_command = 2;
        SetBufferCommand set_buffer_command = 3;
        DiagnosticsCommand diagnostics_command = 4;
        InsertOnNewCmdCommand insert_on_new_cmd_command = 5;
    }
}

// A response back from a command to figterm
message FigtermResponse {
  oneof response {
    DiagnosticsResponse diagnostics_response = 1;    
  }
}

message Action {
  // unique identifier for the action
  string identifier = 1;   
  // the keys that are bound to the action
  repeated string bindings = 2; 
}

// Intercept command
// Used to set which input is intercepted by figterm
message InterceptCommand {
    // Set figterm to intercept default keys
    message SetInterceptAll { }

    // Clear figterm intercepts
    message ClearIntercept { }

    // Set figterm to intercept keys according to the FigJs interface
    message SetFigjsIntercepts {
      bool intercept_bound_keystrokes = 1;
      bool intercept_global_keystrokes = 2;
      repeated Action actions = 3;
    }

    reserved 1, 3, 4;

    // The intercept command to execute
    oneof intercept_command {
        ClearIntercept clear_intercept = 2;
        SetInterceptAll set_intercept_all = 5;
        SetFigjsIntercepts set_figjs_intercepts = 6;
    }
}

// Insert text command
// Used to insert text directly into the terminal
message InsertTextCommand {
    // insert str at cursor, accounting for deletions
    optional string insertion = 1;
    // delete `n` characters to the left of the cursor
    optional uint64 deletion = 2;
    // move cursor `n` characters from current position, 
    // accounting for insertion & deletion
    optional int64 offset = 3;
    // execute editbuffer (if true, append \r)
    optional bool immediate = 4;
    // client buffer at the time of the insertion request (prior to insertion)
    optional string insertion_buffer = 5;
}

// Set buffer command
// Used to set the line of text in the edit buffer
message SetBufferCommand {
    // The text to set
    string text = 1;
    // The cursor position to set
    optional uint64 cursor_position = 2;
}

message DiagnosticsCommand { }

message TermColor {
  message Rgb {
    int32 r = 1;
    int32 b = 2;
    int32 g = 3;
  }

  oneof color {
    Rgb rgb = 1;
    uint32 indexed = 2;
  }
}

message TermStyle {
  // Background color of the terminal style
  optional TermColor fg = 1;
  // Foreground color of the terminal style
  optional TermColor bg = 2;
}

message DiagnosticsResponse { 
  // Current shell context of the figterm instance
  optional fig_common.ShellContext shell_context = 1;
  // Current suggestion style for fish
  optional TermStyle fish_suggestion_style = 2;
  // Current suggestion style for zsh autosuggestion
  optional TermStyle zsh_autosuggestion_style = 3;
  // The current edit buffer
  optional string edit_buffer = 4;
  // The current cursor cursor position
  optional uint32 cursor_position = 5;
}

message InsertOnNewCmdCommand {
  string text = 1;
  bool execute = 2;
}

