syntax = "proto3";
package fig;

import "fig_common.proto";

option objc_class_prefix = "FIG";

message ClientOriginatedMessage {
  optional int64 id = 1;

  oneof submessage {
    PositionWindowRequest position_window_request = 101;
    PseudoterminalExecuteRequest pseudoterminal_execute_request = 102 [deprecated = true];
    PseudoterminalWriteRequest pseudoterminal_write_request = 103 [deprecated = true];
    ReadFileRequest read_file_request = 104;
    WriteFileRequest write_file_request = 105;
    ContentsOfDirectoryRequest contents_of_directory_request = 106;
    NotificationRequest notification_request = 107;
    GetSettingsPropertyRequest get_settings_property_request = 108;
    UpdateSettingsPropertyRequest update_settings_property_request = 109;
    InsertTextRequest insert_text_request = 110;
    UpdateApplicationPropertiesRequest update_application_properties_request = 111;
    DestinationOfSymbolicLinkRequest destination_of_symbolic_link_request = 112;
    GetDefaultsPropertyRequest get_defaults_property_request = 113 [deprecated = true]; 
    UpdateDefaultsPropertyRequest update_defaults_property_request = 114 [deprecated = true];
    TelemetryIdentifyRequest telemetry_identify_request = 116;
    TelemetryTrackRequest telemetry_track_request = 117;
    OnboardingRequest onboarding_request = 118;
    WindowFocusRequest window_focus_request = 119;
    OpenInExternalApplicationRequest open_in_external_application_request = 120;
    GetConfigPropertyRequest get_config_property_request = 121;
    UpdateConfigPropertyRequest update_config_property_request = 122;
    PseudoterminalRestartRequest pseudoterminal_restart_request = 123;
    TerminalSessionInfoRequest terminal_session_info_request = 124;
    DebuggerUpdateRequest debugger_update_request = 125;
    ApplicationUpdateStatusRequest application_update_status_request = 126;
    AppendToFileRequest append_to_file_request = 127;
    GetLocalStateRequest get_local_state_request = 128;
    UpdateLocalStateRequest update_local_state_request = 129;
    RunProcessRequest run_process_request = 130;
    MacosInputMethodRequest macos_input_method_request = 131;
    CreateDirectoryRequest create_directory_request = 132;
    InstallRequest install_request = 133;
    TelemetryPageRequest telemetry_page_request = 134;
    AggregateSessionMetricActionRequest aggregate_session_metric_action_request = 135;
    // UserLoginRequest user_login_request = 136;
    UserLogoutRequest user_logout_request = 137;
    CheckForUpdatesRequest check_for_updates_request = 138;
    UpdateApplicationRequest update_application_request = 139;
  }

  reserved 115;
}

message ServerOriginatedMessage {
  optional int64 id = 1;

  // Responses to ClientOriginatedMessages of the corresponding type
  oneof submessage {
    string error = 2;
    bool success = 3;
    PositionWindowResponse position_window_response = 100;
    PseudoterminalExecuteResponse pseudoterminal_execute_response = 101 [deprecated = true];
    ReadFileResponse read_file_response = 102;
    ContentsOfDirectoryResponse contents_of_directory_response = 103;
    GetSettingsPropertyResponse get_settings_property_response = 104;
    DestinationOfSymbolicLinkResponse destination_of_symbolic_link_response = 105;
    GetDefaultsPropertyResponse get_defaults_property_response = 106;
    GetConfigPropertyResponse get_config_property_response = 107;
    TerminalSessionInfoResponse terminal_session_info_response = 108;
    ApplicationUpdateStatusResponse application_update_status_response = 109;
    GetLocalStateResponse get_local_state_response = 110;
    RunProcessResponse run_process_response = 111;
    MacosInputMethodResponse macos_input_method_response = 112;
    InstallResponse install_response = 113;
    CheckForUpdatesResponse check_for_updates_response = 114;

    Notification notification = 1000;
  }
}

// Basic types

message Point {
  float x = 1;
  float y = 2;
}

message Size {
  float width = 1;
  float height = 2;
}

message Frame {
  Point origin = 1;
  Size size = 2;
}

message Process {
  optional int32 pid = 1;
  optional string executable = 2;
  optional string directory = 3;
  repeated fig_common.EnvironmentVariable env = 4;
}

message FilePath {
  string path = 1;
  optional string relative_to = 2;
  optional bool expand_tilde_in_path = 3;
}

enum Modifiers {
  MODIFIERS_CONTROL = 0;
  MODIFIERS_OPTION = 1;
  MODIFIERS_COMMAND = 2;
  MODIFIERS_SHIFT = 3;
  MODIFIERS_FUNCTION = 4;
  MODIFIERS_NUMPAD = 5;
}

message KeyEvent {
  optional int32 apple_key_code = 1;
  optional string characters = 2;
  optional string characters_ignoring_modifiers = 3;
  repeated Modifiers modifiers = 4;
  optional bool is_repeat = 5;
}

message Screen {
  optional Frame frame = 1;
}

message Session {
  optional string session_id = 1;
  optional Process frontmost_process = 2;
  repeated fig_common.EnvironmentVariable env = 3;
}

message Application {
  optional string bundle_identifier = 1;
  optional string name = 2;
}

message Window {
  optional string window_id = 1;
  optional Frame frame = 2;
  optional Session current_session = 3;
  optional Application app = 4;
  optional Screen current_screen = 5;
}

message Result {
  enum Result {
    RESULT_OK = 0;
    RESULT_ERROR = 1;
  }

  Result result = 1;
  optional string error = 2;
}

/// Requests

message TextUpdate {
  optional string insertion = 1;
  optional int64 deletion = 2;
  optional int64 offset = 3;
  optional bool immediate = 4;
  // client buffer at the time of the insertion request (prior to insertion)
  optional string insertion_buffer = 5;
}

message InsertTextRequest {
  oneof type {
    string text = 1;
    TextUpdate update = 2;
  }
  optional string terminal_session_id = 3;
}

message PseudoterminalWriteRequest {
  oneof input {
    string text = 1;
    bytes octal = 2;
  }
}

message PseudoterminalExecuteRequest {
  string command = 1;
  optional string working_directory = 2;
  optional bool background_job = 3;
  optional bool is_pipelined = 4;
  repeated fig_common.EnvironmentVariable env = 5;
  optional string terminal_session_id = 6;
}

message PseudoterminalExecuteResponse {
  string stdout = 1;
  optional string stderr = 2;
  optional int32 exit_code = 3;
}

message PseudoterminalRestartRequest {}

message PositionWindowRequest {
  Point anchor = 1;
  Size size = 2;
  optional bool dryrun = 3;
}

message PositionWindowResponse {
  optional bool is_above = 1;
  optional bool is_clipped = 2;
}

message ReadFileRequest {
  FilePath path = 1;
  optional bool is_binary_file = 2;
}

message ReadFileResponse {
  oneof type {
    bytes data = 1;
    string text = 2;
  }
}

message WriteFileRequest {
  optional FilePath path = 1;

  oneof data {
    string text = 2;
    bytes binary = 3;
  }
}

message AppendToFileRequest {
  optional FilePath path = 1;

  oneof data {
    string text = 2;
    bytes binary = 3;
  }
}

message ContentsOfDirectoryRequest {
  optional FilePath directory = 1;
}

message ContentsOfDirectoryResponse {
  repeated string file_names = 1;
}

message DestinationOfSymbolicLinkRequest {
  optional FilePath path = 1;
}

message DestinationOfSymbolicLinkResponse {
  optional FilePath destination = 1;
}

message CreateDirectoryRequest {
  FilePath path = 1;
  optional bool recursive = 2;
}

/// Defaults

message DefaultsValue {
  oneof type {
    bool null = 1;
    bool boolean = 2;
    string string = 3;
    int64 integer = 4;
  }
}

message GetDefaultsPropertyRequest {
  optional string key = 1;
}

message GetDefaultsPropertyResponse {
  optional string key = 1;
  optional DefaultsValue value = 2;
}

message UpdateDefaultsPropertyRequest {
  optional string key = 1;
  optional DefaultsValue value = 2;
}

/// Config

message GetConfigPropertyRequest {
  optional string key = 1;
}

message GetConfigPropertyResponse {
  optional string value = 1;
}

message UpdateConfigPropertyRequest {
  optional string key = 1;
  optional string value = 2;
}

/// Settings

message GetSettingsPropertyRequest {
  optional string key = 1;
}

message GetSettingsPropertyResponse {
  optional string json_blob = 1;
  optional bool is_default = 2;
}

message UpdateSettingsPropertyRequest {
  optional string key = 1;
  optional string value = 2;
}

/// Telemetry
message TelemetryProperty {
  string key = 1;
  string value = 2;
}

message TelemetryTrackRequest {
  optional string event = 1;
  repeated TelemetryProperty properties = 2 [deprecated = true];
  optional string json_blob = 4;

  // Specify the namespace associated with an action, namespace_id takes precedence.
  optional string namespace = 5;
  optional int64 namespace_id = 6;
}

message TelemetryIdentifyRequest {
  optional string json_blob = 4;

  reserved 2;
}

message TelemetryPageRequest {
  optional string category = 1;
  optional string name = 2;
  optional string json_blob = 3;
}

message AggregateSessionMetricActionRequest {
  message Increment {
    string field = 1;
    optional int64 amount = 2;
  }

  oneof action {
    Increment increment = 2;
  }
}

/// Onboarding

enum OnboardingAction {
  ONBOARDING_ACTION_INSTALLATION_SCRIPT = 0;
  ONBOARDING_ACTION_PROMPT_FOR_ACCESSIBILITY_PERMISSION = 1;
  ONBOARDING_ACTION_LAUNCH_SHELL_ONBOARDING = 3;
  ONBOARDING_ACTION_UNINSTALL = 4;
  ONBOARDING_ACTION_CLOSE_ACCESSIBILITY_PROMPT_WINDOW = 5;
  ONBOARDING_ACTION_REQUEST_RESTART = 6;
  ONBOARDING_ACTION_CLOSE_INPUT_METHOD_PROMPT_WINDOW = 7;
  ONBOARDING_ACTION_FINISH_ONBOARDING = 8;
  // This should be ran after the user has logged in every time
  ONBOARDING_ACTION_POST_LOGIN = 9;
}

message OnboardingRequest {
  OnboardingAction action = 1;
}

/// Installation

enum InstallComponent {
  INSTALL_COMPONENT_DOTFILES = 0;
  INSTALL_COMPONENT_IBUS = 1;
  INSTALL_COMPONENT_ACCESSIBILITY = 2;
  INSTALL_COMPONENT_INPUT_METHOD = 3;
  INSTALL_COMPONENT_SSH = 4;
}

enum InstallAction {
  INSTALL_ACTION_INSTALL = 0;
  INSTALL_ACTION_UNINSTALL = 1;
  INSTALL_ACTION_STATUS = 2;
}

message InstallRequest {
  InstallComponent component = 1;
  InstallAction action = 2;
}

message InstallResponse {
  enum InstallationStatus {
    INSTALLATION_STATUS_INSTALLED = 0;
    INSTALLATION_STATUS_NOT_INSTALLED = 1;
    // The integration is not supported on the given platform
    INSTALLATION_STATUS_NOT_SUPPORTED = 2;
  }

  oneof response {
    Result result = 1;
    InstallationStatus installation_status = 2;
  }
}

/// User

// todo(grant)
// message UserLoginRequest {}

message UserLogoutRequest {}

/// Window Focus

enum FocusAction {
  FOCUS_ACTION_TAKE_FOCUS = 0;
  FOCUS_ACTION_RETURN_FOCUS = 1;
}

message WindowFocusRequest {
  optional FocusAction type = 1;
}

message OpenInExternalApplicationRequest {
  optional string url = 1;
}

/// Updating actions

// check for updates and return the latest version
message CheckForUpdatesRequest {}

message CheckForUpdatesResponse {
  optional bool is_update_available = 1;
  optional string version = 2;
}

// update to the latest version available
message UpdateApplicationRequest {
  optional bool ignore_rollout = 1;
  optional bool interactive = 2;
  optional bool relaunch_dashboard = 3;
}

/// Actions

enum ActionAvailability {
  ACTION_AVAILABILITY_ALWAYS = 0;
  // the action can only be performed when the app has keyboard focus
  ACTION_AVAILABILITY_WHEN_FOCUSED = 1;
  // the action can only be performed when the app is visible
  ACTION_AVAILABILITY_WHEN_VISIBLE = 2;
  // the action can only be performed when the app is hidden
  ACTION_AVAILABILITY_WHEN_HIDDEN = 3;
}

message Action {
  // unique identifier for the action; not user facing.
  optional string identifier = 1;
  // name of action, will appear in user interfaces.
  optional string name = 2;
  // a quick summary of what the action will do
  optional string description = 3;
  optional string category = 4;
  // when can this action be performed
  optional ActionAvailability availability = 5;
  repeated string default_bindings = 6;
}

/// App properties

message ActionList {
  repeated Action actions = 1;
}

message UpdateApplicationPropertiesRequest {
  optional bool intercept_bound_keystrokes = 1;
  optional bool intercept_global_keystrokes = 3;
  optional ActionList action_list = 4;
  optional string current_terminal_session_id = 5;

  reserved 2;
}

/// Terminal Session

message TerminalSessionInfoRequest {
  string terminal_session_id = 1;
}

message TerminalSessionInfoResponse {
  optional fig_common.ShellContext context = 1;
  optional string buffer = 2;
  optional int64 cursor = 3;
}

/// Debugger

message DebuggerUpdateRequest {
  optional string color = 1;
  repeated string layout = 2;
}

/// Application Update Status

message ApplicationUpdateStatusRequest {}

message ApplicationUpdateStatusResponse {
  optional bool available = 1;
  optional string version = 2;
  optional string build = 3;
  optional string published = 4;
}

/// L

message GetLocalStateRequest {
  optional string key = 1;
}

message GetLocalStateResponse {
  optional string json_blob = 1;
}

message UpdateLocalStateRequest {
  optional string key = 1;
  optional string value = 2;
}

/// Run Process

message RunProcessRequest {
  string executable = 1;
  repeated string arguments = 2;
  optional string working_directory = 3;
  repeated fig_common.EnvironmentVariable env = 4;
  optional string terminal_session_id = 5;
}

message RunProcessResponse {
  string stdout = 1;
  string stderr = 2;
  int32 exit_code = 3;
}

/// Macos Input Method

enum InputMethodAction {
  INPUT_METHOD_ACTION_REGISTER = 0;
  INPUT_METHOD_ACTION_ENABLE = 1;
  INPUT_METHOD_ACTION_SELECT = 2;
  INPUT_METHOD_ACTION_DISABLE = 3;
  INPUT_METHOD_ACTION_DESELECT = 4;
  INPUT_METHOD_ACTION_STATUS = 5;
}

enum InputMethodState {
  INPUT_METHOD_STATE_REGISTERED = 0;
  INPUT_METHOD_STATE_ENABLED = 1;
  INPUT_METHOD_STATE_SELECTED = 2;
  INPUT_METHOD_STATE_UNKNOWN = 3;
}

message MacosInputMethodRequest {
  InputMethodAction action = 1;
}

message MacosInputMethodResponse {
  string message = 1;
  int32 code = 2;
  InputMethodState state = 3;
}

/// Notifications

message NotificationRequest {
  optional bool subscribe = 1;
  optional NotificationType type = 2;
}

enum NotificationType {
  NOTIFICATION_TYPE_ALL = 0;
  NOTIFICATION_TYPE_NOTIFY_ON_EDITBUFFFER_CHANGE = 1;
  NOTIFICATION_TYPE_NOTIFY_ON_SETTINGS_CHANGE = 2;
  NOTIFICATION_TYPE_NOTIFY_ON_PROMPT = 3;
  NOTIFICATION_TYPE_NOTIFY_ON_LOCATION_CHANGE = 4;
  NOTIFICATION_TYPE_NOTIFY_ON_PROCESS_CHANGED = 5;
  NOTIFICATION_TYPE_NOTIFY_ON_KEYBINDING_PRESSED = 6;
  NOTIFICATION_TYPE_NOTIFY_ON_FOCUS_CHANGED = 7;
  NOTIFICATION_TYPE_NOTIFY_ON_HISTORY_UPDATED = 8;
  NOTIFICATION_TYPE_NOTIFY_ON_APPLICATION_UPDATE_AVAILABLE = 9;
  NOTIFICATION_TYPE_NOTIFY_ON_LOCAL_STATE_CHANGED = 10;
  NOTIFICATION_TYPE_NOTIFY_ON_EVENT = 11;
}

message Notification {
  oneof type {
    EditBufferChangedNotification edit_buffer_notification = 1;
    SettingsChangedNotification settings_changed_notification = 2;
    ShellPromptReturnedNotification shell_prompt_returned_notification = 3;
    // Unimplemented
    LocationChangedNotification location_changed_notification = 4;
    ProcessChangedNotification process_change_notification = 5;
    KeybindingPressedNotification keybinding_pressed_notification = 6;
    WindowFocusChangedNotification window_focus_changed_notification = 7;
    // Unimplemented
    HistoryUpdatedNotification history_updated_notification = 8;
    // Unimplemented
    ApplicationUpdateAvailableNotification application_update_available_notification = 9;
    LocalStateChangedNotification local_state_changed_notification = 10;
    EventNotification event_notification = 11;
  }
}

message EditBufferChangedNotification {
  optional string session_id = 1;
  optional int32 cursor = 2;
  optional string buffer = 3;
  optional fig_common.ShellContext context = 4;
}

message SettingsChangedNotification {
  optional string json_blob = 1;
}

message ShellPromptReturnedNotification {
  optional string session_id = 1;
  optional Process shell = 2;
}

message LocationChangedNotification {
  optional string session_id = 1;
  optional string host_name = 2;
  optional string user_name = 3;
  optional string directory = 4;
}

message ProcessChangedNotification {
  optional string session_id = 1;
  optional Process new_process = 2;
}

message KeybindingPressedNotification {
  optional KeyEvent keypress = 1;
  optional string action = 2;
  optional fig_common.ShellContext context = 3;
}

message WindowFocusChangedNotification {
  optional Window window = 1;
}

message HistoryUpdatedNotification {
  optional string command = 1;
  // the name of the process
  optional string process_name = 2;
  // the directory where the user ran the command
  optional string current_working_directory = 3;
  // the value of $TERM_SESSION_ID
  optional string session_id = 4;
  optional string hostname = 5;
  // the exit code of the command
  optional int32 exit_code = 6;
}

message ApplicationUpdateAvailableNotification {
  optional ApplicationUpdateStatusResponse status = 1;
}

message LocalStateChangedNotification {
  optional string json_blob = 1;
}

message EventNotification {
  optional string event_name = 1;
  optional string payload = 2;
}
