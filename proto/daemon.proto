syntax = "proto3";
package daemon;

// 
// Commands
//

// Message type used to send a command to daemon
message DaemonMessage {
    optional int64 id = 1;
	optional bool no_response = 2;

    oneof command {
        // A request to get diagnostic information from the daemon
        DiagnosticCommand diagnostic = 101;
        // A request to tigger a self-update if possible
        SelfUpdateCommand self_update = 102;
    }
}

// Response message type used to send a response to a command
message DaemonResponse {
	optional int64 id = 1;

	oneof response {
        // A response to a diagnostic command
        DiagnosticResponse diagnostic = 101;
        // A response to a self-update command
        SelfUpdateResponse self_update = 102;
	}
}

// Command to get diagnostics
message DiagnosticCommand {
    // Parts of the diagnostics to get
    enum DiagnosticPart {
        TIME_STARTED_EPOCH = 0;
        SETTINGS_WATCHER_STATUS = 1;
        WEBSOCKET_STATUS = 2;
        UNIX_SOCKET_STATUS = 3;
    }

    // If set only get the diagnostic part specified
    repeated DiagnosticPart parts = 1;
}

// Response to DiagnosticCommand
message DiagnosticResponse {
    // Status of the settings watcher
    message SettingsWatcherStatus {
        enum Status {
            OK = 0;
            ERROR = 1;
        }
    
        Status status = 1;
        optional string error = 2;
    }
    
    // Status of the websocket
    message WebsocketStatus {
        enum Status {
            OK = 0;
            ERROR = 1;
        }
    
        Status status = 1;
        optional string error = 2;
    }    

    // Status of the unix socket
    message UnixSocketStatus {
        enum Status {
            OK = 0;
            ERROR = 1;
        }
    
        Status status = 1;
        optional string error = 2;
    }

    // The time that the settings debugwatcher was started in seconds since the epoch
    optional uint64 time_started_epoch = 1;
    // The status of the settings watcher
    optional SettingsWatcherStatus settings_watcher_status = 2;
    // The status of the websocket
    optional WebsocketStatus websocket_status = 3;
    // The status of the unix socket
    optional UnixSocketStatus unix_socket_status = 4;
}

// Command to tigger the daemon to attempt to self-update Fig if possible
message SelfUpdateCommand { }

// Response to SelfUpdateCommand
message SelfUpdateResponse {
    // Status of the update
    enum Status {
        ERROR = 0;
        OK = 1;
    }

    Status status = 1;
    optional string error = 2;
}