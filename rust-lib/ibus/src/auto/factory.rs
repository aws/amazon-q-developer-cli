// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Engine;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "IBusFactory")]
    pub struct Factory(Object<ffi::IBusFactory, ffi::IBusFactoryClass>);

    match fn {
        type_ => || ffi::ibus_factory_get_type(),
    }
}

impl Factory {
    pub const NONE: Option<&'static Factory> = None;

    #[doc(alias = "ibus_factory_new")]
    pub fn new(connection: &gio::DBusConnection) -> Factory {
        unsafe { from_glib_none(ffi::ibus_factory_new(connection.to_glib_none().0)) }
    }
}

pub trait FactoryExt: 'static {
    #[doc(alias = "ibus_factory_add_engine")]
    fn add_engine(&self, engine_name: &str, engine_type: glib::types::Type);

    #[doc(alias = "ibus_factory_create_engine")]
    fn create_engine(&self, engine_name: &str) -> Option<Engine>;

    #[doc(alias = "create-engine")]
    fn connect_create_engine<F: Fn(&Self, &str) -> Option<Engine> + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;
}

impl<O: IsA<Factory>> FactoryExt for O {
    fn add_engine(&self, engine_name: &str, engine_type: glib::types::Type) {
        unsafe {
            ffi::ibus_factory_add_engine(
                self.as_ref().to_glib_none().0,
                engine_name.to_glib_none().0,
                engine_type.into_glib(),
            );
        }
    }

    fn create_engine(&self, engine_name: &str) -> Option<Engine> {
        unsafe {
            from_glib_full(ffi::ibus_factory_create_engine(
                self.as_ref().to_glib_none().0,
                engine_name.to_glib_none().0,
            ))
        }
    }

    fn connect_create_engine<F: Fn(&Self, &str) -> Option<Engine> + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn create_engine_trampoline<
            P: IsA<Factory>,
            F: Fn(&P, &str) -> Option<Engine> + 'static,
        >(
            this: *mut ffi::IBusFactory,
            engine_name: *mut libc::c_char,
            f: glib::ffi::gpointer,
        ) -> *mut ffi::IBusEngine {
            let f: &F = &*(f as *const F);
            f(
                Factory::from_glib_borrow(this).unsafe_cast_ref(),
                &glib::GString::from_glib_borrow(engine_name),
            )
            .to_glib_full()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"create-engine\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    create_engine_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Factory {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Factory")
    }
}
