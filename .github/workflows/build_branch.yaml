name: Build

on:
  push:
    branches:
      - master
      - staging
  workflow_dispatch:
    inputs:
      buildName:
        description: 'Name for Build'
      useCache:
        description: 'Use cached build, if possible'     
        default: 'false'
      notarizeApp:
        description: 'Notarize the app bundle'     
        default: 'true'
      notarizeDMG:
        description: 'Notarize the .dmg'     
        default: 'true'
      useSparkle:
        description: 'Distribute the build using Sparkle'     
        default: 'true'
      createGithubRelease:
        description: 'Create a release on Github'     
        default: 'true'
  schedule:
    - cron:  '0 7 * * 1-5'

jobs:
  release:
    runs-on: macos-11
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    timeout-minutes: 45
    steps:
############################################
# Declare ENVIRONMENT variables
############################################

      - name: "SET: VERSIONS_BRANCH and APPCAST_PREFIX"
        env:
          REF: ${{ github.ref }}
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          if [[ $REF == 'refs/heads/master' ]]; then
              echo "::set-env name=VERSIONS_BRANCH::main"
              echo "::set-env name=APPCAST_PREFIX::versions"

          elif [[ $REF == 'refs/heads/staging' ]]; then
              echo "::set-env name=VERSIONS_BRANCH::beta"
              echo "::set-env name=APPCAST_PREFIX::beta"

          else
              echo "::set-env name=VERSIONS_BRANCH::alpha"
              echo "::set-env name=APPCAST_PREFIX::alpha"

          fi
          echo $VERSIONS_BRANCH
          echo $APPCAST_PREFIX
          echo BRANCH_NAME=${GITHUB_REF##*/} >> $GITHUB_ENV


      - name: "Checkout Project"
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: "SET: VERSION"
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          echo "::set-env name=VERSION::$(cat fig.xcodeproj/project.pbxproj | grep -m1 'MARKETING_VERSION' | cut -d'=' -f2 | tr -d ';' | tr -d ' ')"      
          echo $VERSION

      - name: "SET: BUMP_BUILD_NUMBER"
        env:
          REF: ${{ github.ref }}
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          if [[ $REF == 'refs/heads/master' ]]; then
              echo "::set-env name=BUMP_BUILD_NUMBER::0"
          elif [[ $REF == 'refs/heads/staging' ]]; then
              echo "::set-env name=BUMP_BUILD_NUMBER::1"
          elif [[ $REF == 'refs/heads/develop' ]]; then
              echo "::set-env name=BUMP_BUILD_NUMBER::1"
          else
              echo "::set-env name=BUMP_BUILD_NUMBER::0"
          fi
          echo $BUMP_BUILD_NUMBER

      - name: "SET: BUILD"
        env:
            ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          echo "::set-env name=BUILD::$(agvtool what-version -terse)"
          echo $BUILD

############################################
# Enable Caching
############################################
      - name: Cache Build archive
        uses: actions/cache@v2
        id: archive
        env:
          cache-name: macos
        with:
          path: Export
          key: build-${{ env.cache-name }}-${{ env.BUILD }}

############################################
# Install Build Tools
############################################
      - uses: actions/setup-go@v2
        with:
          go-version: '1.17'

############################################
# Build, Archive & Export 
############################################
      - name: "Select Xcode 12.5.1"
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "12.5.1"

      - name: "Import Certificate"
        uses: devbotsxyz/import-signing-certificate@main
        with:
          certificate-data: ${{ secrets.SIGNING_CERTIFICATE_P12_DATA }}
          certificate-passphrase: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: "Create exportOptions.plist"
        run: |
          echo $FILE_CONTENTS > $FILE_NAME
        env:
          FILE_NAME: "exportOptions.plist"
          # FILE_BASE64: "PCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KICAgIDxrZXk+bWV0aG9kPC9rZXk+CiAgICA8c3RyaW5nPmRldmVsb3Blci1pZDwvc3RyaW5nPgogICAgPGtleT50ZWFtSUQ8L2tleT4KICAgIDxzdHJpbmc+RDkzUFBEOTRXSzwvc3RyaW5nPgo8L2RpY3Q+CjwvcGxpc3Q+"
          FILE_CONTENTS: |
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
                <key>method</key>
                <string>developer-id</string>
                <key>teamID</key>
                <string>${{secrets.NOTARIZE_TEAM_ID}}</string>
            </dict>
            </plist>
     
      - name: "SET: CODESIGNING_IDENTITY"
        run: |
          security find-identity -v -p codesigning
          echo CODESIGNING_IDENTITY=$(security find-identity -v -p codesigning | grep "Developer ID Application" | grep ${{ secrets.NOTARIZE_TEAM_ID }} | cut -d' ' -f5- | cut -d "\"" -f2) >> $GITHUB_ENV
      - name: "Increase keychain access interval"
        run: security set-keychain-settings -lut 1200

      - name: "Archive"
        if: ${{ github.event.inputs.useCache == 'false' || steps.archive.outputs.cache-hit != 'true' }}
        uses: devbotsxyz/xcode-archive@v1
        with:
          scheme: fig

      - name: "Export & Sign Release Build"
        if: ${{ github.event.inputs.useCache == 'false' || steps.archive.outputs.cache-hit != 'true' }}
        uses: mattschrage/xcode-export-archive@main
        with:
          scheme: fig

############################################
# Sentry Upload
############################################
      - name: Install Sentry
        if: ${{ github.event.inputs.useCache == 'false' || steps.archive.outputs.cache-hit != 'true' }}
        run: curl -sL https://sentry.io/get-cli/ | bash
      - name: Upload dSYM files to Sentry
        if: ${{ github.event.inputs.useCache == 'false' || steps.archive.outputs.cache-hit != 'true' }}
        run: sentry-cli upload-dif --org withfig --project macos-app --derived-data
        env: 
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

############################################
# Notarize App Bundle
############################################
      - name: "Select Xcode 13.0"
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "13.0"
      - name: "Notarize and Staple"
        if: github.event.inputs.notarizeApp != 'false'
        run: |
          /usr/bin/ditto -c -k --keepParent Export/Fig.app Fig.zip
          xcrun notarytool submit Fig.zip --apple-id "$NOTARIZE_USERNAME" --password "$NOTARIZE_PASSWORD" --team-id "$NOTARIZE_TEAM_ID" --wait
          rm Fig.zip
          xcrun stapler staple Export/Fig.app
          # xcrun altool --notarize-app --primary-bundle-id "com.mschrage.fig" -u "$NOTARIZE_USERNAME" -p "$NOTARIZE_PASSWORD" --file Fig.zip
        env:
          NOTARIZE_USERNAME: ${{ secrets.NOTARIZE_USERNAME }}
          NOTARIZE_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}
          NOTARIZE_TEAM_ID: ${{ secrets.NOTARIZE_TEAM_ID }}
      - name: "VERIFY: App is codesigned properly"
        if: github.event.inputs.notarizeApp != 'false'
        run: codesign --verify --deep --strict --verbose=2 Export/Fig.app
      - name: "VERIFY: App has notarization ticket"
        if: github.event.inputs.notarizeApp != 'false'
        run: spctl -a -v Export/Fig.app

############################################
# Create and Notarize DMG
############################################
      # - name: Install fileicon
      #   run: HOMEBREW_NO_AUTO_UPDATE=1 brew install fileicon
      - name: Setup Node Environment
        uses: actions/setup-node@v1
      - name: Install appdmg
        run: npm install -g appdmg
      - name: "Create dmg-spec.json"
        run: |
          echo $FILE_CONTENTS > $FILE_NAME
        env:
          FILE_NAME: ./dmg/dmg-spec.json
          FILE_CONTENTS: |
            {
              "title": "Fig",
              "icon": "VolumeIcon.icns",
              "background": "dmg-background.png",
              "icon-size": 160,
              "format": "ULFO",
              "window": {
                "size": {
                  "width": 660,
                  "height": 400
                }
              },
              "contents": [
                {
                  "x": 180,
                  "y": 170,
                  "type": "file",
                  "path": "../Export/Fig.app"
                },
                {
                  "x": 480,
                  "y": 170,
                  "type": "link",
                  "path": "/Applications"
                }
              ],
              "code-sign": {
                "signing-identity": "${{env.CODESIGNING_IDENTITY}}"
              }
            }
      - name: Create DMG
        run: appdmg ./dmg/dmg-spec.json "fig $BUILD.dmg"
      # - name: Update Fileicon
      #   run: fileicon set "fig $BUILD.dmg" ./dmg/VolumeIcon.icns

      - name: "Notarize DMG"
        if: github.event.inputs.notarizeDMG != 'false'
        run: |
          xcrun notarytool submit "fig $BUILD.dmg" --apple-id "$NOTARIZE_USERNAME" --password "$NOTARIZE_PASSWORD" --team-id "$NOTARIZE_TEAM_ID" --wait
          # xcrun stapler staple Export/Fig.app
        env:
          NOTARIZE_USERNAME: ${{ secrets.NOTARIZE_USERNAME }}
          NOTARIZE_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}
          NOTARIZE_TEAM_ID: ${{ secrets.NOTARIZE_TEAM_ID }}
      - name: "VERIFY: DMG notarization status"
        if: github.event.inputs.notarizeDMG != 'false'
        run: spctl -a -t open --context context:primary-signature -v  "fig $BUILD.dmg" 

############################################
# Sparkle Distribution
############################################

      - name: "Download Sparkle CLI"
        if: github.event.inputs.useSparkle != 'false'
        run: |
          curl -sOL https://github.com/sparkle-project/Sparkle/releases/download/1.24.0/Sparkle-1.24.0.tar.xz
          mkdir Sparkle
          cd Sparkle && tar xopf ../Sparkle-1.24.0.tar.xz
          cd ..
      - name: "Checkout withfig/versions"
        if: github.event.inputs.useSparkle != 'false'
        run: |
          git clone --branch $VERSIONS_BRANCH https://mattschrage:$(echo $PERSONAL_GITHUB_ACCESS_TOKEN)@github.com/withfig/versions.git
        env:
          PERSONAL_GITHUB_ACCESS_TOKEN: ${{ secrets.PERSONAL_GITHUB_ACCESS_TOKEN }}
      - name: Add latest versions
        if: github.event.inputs.useSparkle != 'false'
        run: |
          cp "fig $BUILD.dmg" ./versions
          rm ./versions/fig@latest.dmg
      - name: "Generate Appcast"
        if: github.event.inputs.useSparkle != 'false'
        run: ./Sparkle/bin/generate_appcast -s $SPARKLE_KEY --download-url-prefix https://$APPCAST_PREFIX.withfig.com versions
        env:
          SPARKLE_KEY: ${{ secrets.SPARKLE_SIGNING_KEY }}
      - name: Commit changes
        if: github.event.inputs.useSparkle != 'false'
        run: |
          cd versions
          cp "fig $BUILD.dmg" fig@latest.dmg
          git add .
          git commit -m "Deploy Build $BUILD"
          cd ..

      - name: Remove old versions
        if: github.event.inputs.useSparkle != 'false'
        run: |
          cd versions

          git ls-tree -r --name-only HEAD | while read filename; do 
            echo "$(git log -1 --format="%at" -- "$filename") $filename"
          done | grep '.dmg\|.delta' | sort -n | tail -${{env.size_of_archive}} | cut -f2-3 -d" " > $TMPDIR/safe

          echo "<<<safe"
          cat $TMPDIR/safe
          echo ">>>"

          echo "<<<deleted"
          ls | grep '.dmg\|.delta' | grep -v -x -F -f $TMPDIR/safe || true
          echo ">>>"

          ls | grep '.dmg\|.delta' | grep -v -x -F -f $TMPDIR/safe | xargs -I{} rm -v {}
          git add .
          git commit -m "Remove old versions" --allow-empty
          cd ..
        env:
          size_of_archive: 37 
      - name: Push Changes to withfig/versions
        if: github.event.inputs.useSparkle != 'false'
        run: |
          cd versions
          git push origin $VERSIONS_BRANCH
          cd ..
############################################
# Create Github Release [Internal]
############################################

      - name: "Package as .zip"
        if: github.event.inputs.createGithubRelease != 'false'
        run: |
          ditto -c -k --sequesterRsrc --keepParent Export/Fig.app Fig.zip
      - name: Create Release
        if: github.event.inputs.createGithubRelease != 'false'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: manual-build-${{ github.run_number }}
          release_name: Manual Build '${{ github.event.inputs.buildName }}'
          draft: false
          prerelease: true
      - name: Upload Release Asset
        if: github.event.inputs.createGithubRelease != 'false'
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: fig ${{env.BUILD}}.dmg
          asset_name: Fig.dmg
          asset_content_type: application/octet-stream
############################################
# Bump Build number
############################################
      - name: "Bump Build number"
        run: agvtool bump
      - name: "Commit Build number"
        if: env.BUMP_BUILD_NUMBER == 1
        run: |
          git pull
          git add fig.xcodeproj/project.pbxproj
          git commit -m "Bump build to $BUILD [skip ci]"
          git push origin ${GITHUB_REF##*/}
      - name: Notify \#macos channel on Discord
        run: |
          curl -H "Content-Type: application/json" \
            -d '{"username": "macOS build deployed!", "content": "${{ github.event.inputs.buildName }} | ${{env.VERSION}} (B${{env.BUILD}}) from branch '${{env.BRANCH_NAME}}'\n" }' \
            ${{secrets.DISCORD_MACOS_WEBHOOK}}
