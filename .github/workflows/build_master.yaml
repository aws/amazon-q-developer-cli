name: Release

on:
  workflow_dispatch:
  push:
    branches: [ master ]

jobs:
  release:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: macos-11
    # timeout-minutes: 15
    steps:
      - name: "Checkout Project"
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: "Get Release Version"
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          echo "::set-env name=VERSION::$(xcodebuild -showBuildSettings | grep MARKETING_VERSION | tr -d 'MARKETING_VERSION =')"      
    
      - name: "Log Release Version"
        run: echo $VERSION

      - name: Install Sentry
        run: curl -sL https://sentry.io/get-cli/ | bash

      - name: "Download Sparkle"
        run: curl -sOL https://github.com/sparkle-project/Sparkle/releases/download/1.24.0/Sparkle-1.24.0.tar.xz
      - name: "Unzip Sparkle"
        run: |
          mkdir Sparkle
          cd Sparkle && tar xopf ../Sparkle-1.24.0.tar.xz
          cd ..

      - name: "Checkout withfig/versions"
        run: git clone https://mattschrage:$(echo $PERSONAL_GITHUB_ACCESS_TOKEN)@github.com/withfig/versions.git

        env:
          PERSONAL_GITHUB_ACCESS_TOKEN: ${{ secrets.PERSONAL_GITHUB_ACCESS_TOKEN }}
      # - name: "Generate Appcast"
      #   run: ./Sparkle/bin/generate_appcast -s $SPARKLE_KEY versions
      #   env:
      #     SPARKLE_KEY: ${{ secrets.SPARKLE_SIGNING_KEY }}
      # - name: Create fig@latest.dmg
      #   run: cp "./versions/fig ${VERSION}.dmg" ./versions/fig@latest.dmg

      # - name: Push Changes to withfig/versions
      #   run: |
      #     cd versions
      #     git add .
      #     git commit -m "Deploy ${VERSION}"
      #     git push origin main
      #     cd ..

      - name: "Install imagemagik for custom DMG image"
        run: brew install graphicsmagick imagemagick
      #
      # Setup
      #
      - name: "Select Xcode 12.5.1"
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "12.5.1"
      # - name: "Select Xcode 12.0.0"
      #   uses: devbotsxyz/xcode-select@main
      #   with:
      #     version: "11.3.1"

      - name: "Import Certificate"
        uses: devbotsxyz/import-signing-certificate@main
        with:
          certificate-data: ${{ secrets.SIGNING_CERTIFICATE_P12_DATA }}
          certificate-passphrase: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}


      #
      # Fail early on failing tests.
      # Disabled because this project does not have tests. (TODO Add some example tests)
      #

      #- name: "Test"
      #  uses: devbotsxyz/xcode-test@v1

      #https://stackoverflow.com/questions/39500634/use-xcodebuild-xcode-8-and-automatic-signing-in-ci-travis-jenkins-environmen/39559864#39559864
      # - name: "Switch to manual code signing"
      #   run: sed -i '' 's/ProvisioningStyle = Automatic;/ProvisioningStyle = Manual;/' fig.xcodeproj/project.pbxproj

      #
      # First we do a developer build that we archive into an
      # .xcarchive.
      #
      #developer-id
      - name: "Create exportOptions.plist"
        run: |
          echo $FILE_BASE64 | base64 -D > $FILE_NAME
        env:
          FILE_NAME: "exportOptions.plist"
          FILE_BASE64: "PCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KICAgIDxrZXk+bWV0aG9kPC9rZXk+CiAgICA8c3RyaW5nPmRldmVsb3Blci1pZDwvc3RyaW5nPgogICAgPGtleT50ZWFtSUQ8L2tleT4KICAgIDxzdHJpbmc+RDkzUFBEOTRXSzwvc3RyaW5nPgo8L2RpY3Q+CjwvcGxpc3Q+"
     
      - name: "Test"
        run: security find-identity -v -p codesigning
      - name: "Archive"
        uses: devbotsxyz/xcode-archive@v1

      - name: Upload dSYM files to Sentry
        run: sentry-cli upload-dif --org withfig --project macos-app --derived-data
        env: 
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

      #
      # Next ask Xcode to export the product from the archived build
      # we just created. This will also re-sign the application with
      # the "Developer ID" certificate.
      #

      - name: "Export & Sign Release Build"
        uses: mattschrage/xcode-export-archive@main

      #
      # Now send the product to Apple's notarization service and then
      # staple it.
      #

      - name: "Notarize Release Build"
        run: npx notarize-cli@0.1.1 --file "Export/Fig.app" --bundle-id com.mschrage.fig
        env:
          NOTARIZE_USERNAME: ${{ secrets.NOTARIZE_USERNAME }}
          NOTARIZE_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}
          
      - name: "Staple Release Build"
        uses: devbotsxyz/xcode-staple@v1
        with:
          product-path: "Export/Fig.app"

      - name: Setup Node Environment
        uses: actions/setup-node@v1
      - name: Install create-dmg
        run: npm install --global create-dmg

      - name: Create DMG
        run: create-dmg "Export/Fig.app"

      # we need to notarize DMGs


      - name: Notarize DMG
        run: |
          npx notarize-cli@0.1.1 --file "fig $VERSION.dmg" --bundle-id com.mschrage.fig
        env:
          NOTARIZE_USERNAME: ${{ secrets.NOTARIZE_USERNAME }}
          NOTARIZE_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}

      - name: Add DMG to /releases
        run: |
          ls
          pwd
          cp "fig $VERSION.dmg" ./versions

      - name: "Generate Appcast"
        run: ./Sparkle/bin/generate_appcast -s $SPARKLE_KEY versions
        env:
          SPARKLE_KEY: ${{ secrets.SPARKLE_SIGNING_KEY }}
      - name: Create fig@latest.dmg
        run: cp "./versions/fig ${VERSION}.dmg" ./versions/fig@latest.dmg
      - name: Push Changes to withfig/releases
        run: |
          cd versions
          git add .
          git commit -m "Deploy ${VERSION}"
          git push origin main
          cd ..

      - name: Rename DMG
        run: mv "fig $VERSION.dmg" fig.dmg
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./fig.dmg
          asset_name: fig.dmg
          asset_content_type: application/octet-stream
      - name: "Get Build"
        env:
            ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          echo "::set-env name=BUILD::$(agvtool what-version -terse)"
      - name: Update the brew cask
        run: echo 'Run the following command:' brew bump-cask-pr --version $VERSION,$BUILD fig
