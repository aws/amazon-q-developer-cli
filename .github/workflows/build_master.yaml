name: Release

on:
  workflow_dispatch:
  push:
    branches: [ master ]

jobs:
  release:
    runs-on: macos-latest
    # timeout-minutes: 15
    steps:
      - name: "Install Sparkle"
        run: git clone --recursive https://github.com/sparkle-project/Sparkle

      - name: "Checkout withfig/versions"
        run: git clone https://mattschrage:$(echo $PERSONAL_GITHUB_ACCESS_TOKEN)@github.com/withfig/versions.git
        env:
          PERSONAL_GITHUB_ACCESS_TOKEN: ${{ secrets.PERSONAL_GITHUB_ACCESS_TOKEN }}

      - name: "Generate Appcast"
        run: ./Sparkle/bin/generate-appcast -s $SPARKLE_KEY versions
        env:
          SPARKLE_KEY: ${{ secrets.SPARKLE_SIGNING_KEY }}

      - name: "Checkout Project"
        uses: actions/checkout@v2

      - name: "Get Release Version"
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          echo "::set-env name=VERSION::$(xcodebuild -showBuildSettings | grep MARKETING_VERSION | tr -d 'MARKETING_VERSION =')"      
    
      - name: "Log Release Version"
        run: echo $VERSION

      - name: "Install imagemagik for custom DMG image"
        run: brew install graphicsmagick imagemagick
      #
      # Setup
      #
      - name: "Select Xcode 12.0.1"
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "12.0.1"
      # - name: "Select Xcode 12.0.0"
      #   uses: devbotsxyz/xcode-select@main
      #   with:
      #     version: "11.3.1"

      - name: "Import Certificate"
        uses: devbotsxyz/import-signing-certificate@main
        with:
          certificate-data: ${{ secrets.SIGNING_CERTIFICATE_P12_DATA }}
          certificate-passphrase: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}


      #
      # Fail early on failing tests.
      # Disabled because this project does not have tests. (TODO Add some example tests)
      #

      #- name: "Test"
      #  uses: devbotsxyz/xcode-test@v1

      #https://stackoverflow.com/questions/39500634/use-xcodebuild-xcode-8-and-automatic-signing-in-ci-travis-jenkins-environmen/39559864#39559864
      # - name: "Switch to manual code signing"
      #   run: sed -i '' 's/ProvisioningStyle = Automatic;/ProvisioningStyle = Manual;/' fig.xcodeproj/project.pbxproj

      #
      # First we do a developer build that we archive into an
      # .xcarchive.
      #
      #developer-id
      - name: "Create exportOptions.plist"
        run: |
          echo $FILE_BASE64 | base64 -D > $FILE_NAME
        env:
          FILE_NAME: "exportOptions.plist"
          FILE_BASE64: "PCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KICAgIDxrZXk+bWV0aG9kPC9rZXk+CiAgICA8c3RyaW5nPmRldmVsb3Blci1pZDwvc3RyaW5nPgogICAgPGtleT50ZWFtSUQ8L2tleT4KICAgIDxzdHJpbmc+RDkzUFBEOTRXSzwvc3RyaW5nPgo8L2RpY3Q+CjwvcGxpc3Q+"
     
      - name: "Test"
        run: security find-identity -v -p codesigning
      - name: "Archive"
        uses: devbotsxyz/xcode-archive@v1

      #
      # Next ask Xcode to export the product from the archived build
      # we just created. This will also re-sign the application with
      # the "Developer ID" certificate.
      #

      - name: "Export & Sign Release Build"
        uses: mattschrage/xcode-export-archive@main

      #
      # Now send the product to Apple's notarization service and then
      # staple it.
      #

      - name: "Notarize Release Build"
        uses: devbotsxyz/xcode-notarize@v1
        with:
          product-path: "Export/Fig.app"
          verbose: true
          appstore-connect-username: ${{ secrets.NOTARIZE_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZE_PASSWORD }}

      - name: "Staple Release Build"
        uses: devbotsxyz/xcode-staple@v1
        with:
          product-path: "Export/Fig.app"

      - name: Setup Node Environment
        uses: actions/setup-node@v1
      - name: Install create-dmg
        run: npm install --global create-dmg

      - name: Create DMG
        run: create-dmg "Export/Fig.app"
      - name: Rename DMG
        run: mv "fig $VERSION.dmg" fig.dmg
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./fig.dmg
          asset_name: fig.dmg
          asset_content_type: application/octet-stream