name: Rust CI

on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
    paths:
      - "rust-lib/**"
      - "figterm/**"
      - "fig_cli/**"
      - "fig_desktop/**"
      - "proto/**"
      - ".github/workflows/rust-ci.yaml"
    branches:
      - develop
  push:
    paths:
      - "rust-lib/**"
      - "figterm/**"
      - "fig_cli/**"
      - "fig_desktop/**"
      - "proto/**"
      - ".github/workflows/rust-ci.yaml"
    branches:
      - develop

concurrency:
  group: rust-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings

jobs:
  cargo-fmt:
    name: Cargo Format
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Nightly Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: rustfmt

      - name: Cargo Format Check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          toolchain: nightly
          args: --check

  proto-format:
    name: Proto Format
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Proto Format Check
        run: clang-format -n --Werror proto/*.proto

  cargo-deny:
    name: Cargo Deny
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deny
        uses: EmbarkStudios/cargo-deny-action@v1

  clippy:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        # os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    name: Clippy ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Ubuntu dependencies
        if: startsWith(matrix.os,'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              build-essential \
              pkg-config \
              dpkg \
              cmake \
              clang \
              libssl-dev \
              libgtk-3-dev \
              libayatana-appindicator3-dev \
              librsvg2-dev \
              libwebkit2gtk-4.0-dev \
              protobuf-compiler \
              fish

      - name: Install Protobuf on Ubuntu
        if: startsWith(matrix.os,'ubuntu')
        run: |
          curl -L -o /tmp/protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v21.6/protoc-21.6-linux-x86_64.zip \
          && unzip /tmp/protoc.zip -d /tmp/protoc \
          && sudo cp /tmp/protoc/bin/protoc /usr/local/bin/ \
          && sudo cp -r /tmp/protoc/include/google /usr/local/include/

      - name: Install macOS dependencies
        if: startsWith(matrix.os,'macos')
        run: |
          brew update || brew update
          brew install protobuf

      - name: Install Windows dependencies
        if: startsWith(matrix.os,'windows')
        run: |
          choco install protoc

      - name: Install Stable Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@6720f05bc48b77f96918929a9019fb2203ff71f8

      - name: Check (MacOS)
        uses: actions-rs/cargo@v1
        if: startsWith(matrix.os,'macos')
        with:
          command: check
          args: --workspace --locked

      - name: Check (Other)
        uses: actions-rs/cargo@v1
        if: ${{ !startsWith(matrix.os,'macos') }}
        with:
          command: check
          args: --workspace --locked --exclude fig_desktop

      - name: Clippy (MacOS)
        uses: actions-rs/clippy-check@v1
        if: startsWith(matrix.os,'macos')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --locked -- -D warnings
          name: Clippy ${{ matrix.os }} Report

      - name: Clippy (Other)
        uses: actions-rs/clippy-check@v1
        if: ${{ !startsWith(matrix.os,'macos') }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --locked --exclude fig_desktop -- -D warnings
          name: Clippy ${{ matrix.os }} Report

  test-code-cov:
    strategy:
      matrix:
        os: [ubuntu-latest]
        # os: [ubuntu-latest, windows-latest]
      fail-fast: false
    name: Test and Codecov ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      OS: ${{ matrix.os }}
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Ubuntu dependencies
        if: startsWith(matrix.os,'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              build-essential \
              pkg-config \
              dpkg \
              cmake \
              clang \
              libssl-dev \
              libgtk-3-dev \
              libayatana-appindicator3-dev \
              librsvg2-dev \
              libwebkit2gtk-4.0-dev \
              protobuf-compiler \
              fish

      - name: Install Protobuf on Ubuntu
        if: startsWith(matrix.os,'ubuntu')
        run: |
          curl -L -o /tmp/protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v21.6/protoc-21.6-linux-x86_64.zip \
          && unzip /tmp/protoc.zip -d /tmp/protoc \
          && sudo cp /tmp/protoc/bin/protoc /usr/local/bin/ \
          && sudo cp -r /tmp/protoc/include/google /usr/local/include/

      - name: Install macOS dependencies
        if: startsWith(matrix.os,'macos')
        run: |
          brew update || brew update
          brew install protobuf fish

      - name: Install Windows dependencies
        if: startsWith(matrix.os,'windows')
        run: |
          choco install protoc shellcheck

      - name: Install Stable Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: llvm-tools-preview

      - name: Rust Cache
        uses: Swatinem/rust-cache@6720f05bc48b77f96918929a9019fb2203ff71f8

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Test & Codecov (MacOS)
        uses: actions-rs/cargo@v1
        if: startsWith(matrix.os,'macos')
        with:
          command: llvm-cov
          args: --workspace --jobs 1 --locked --lcov --output-path lcov.info

      - name: Test & Codecov (Other)
        uses: actions-rs/cargo@v1
        if: ${{ !startsWith(matrix.os,'macos') }}
        with:
          command: llvm-cov
          args: --workspace --jobs 1 --locked --exclude fig_desktop --lcov --output-path lcov.info    
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          env_vars: OS
