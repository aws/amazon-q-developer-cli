name: Rust CI

on:
  workflow_dispatch:
  pull_request:
    paths:
      - "rust-lib/**"
      - "figterm/**"
      - "fig_cli/**"
      - "proto/**"
      - ".github/workflows/rust-ci.yaml"
  push:
    paths:
      - "rust-lib/**"
      - "figterm/**"
      - "fig_cli/**"
      - "proto/**"
      - ".github/workflows/rust-ci.yaml"
    branches:
      - master
      - staging
      - develop

env:
  CARGO_TERM_COLOR: always
  LINUX_CRATES: ( fig_cli figterm )
  MACOS_CRATES: ( fig_cli figterm )
  WIN_CRATES: ( fig_cli )

jobs:
  rust-build-and-test:
    name: Rust Build and Test
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # If on Ubuntu, install dependencies
      - name: Install Ubuntu dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt-get install -y libxcb1-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: actions/cache@v2
        with:
          path: target/
          key: rust-ci-build-and-test-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            rust-ci-build-and-test-${{ runner.os }}-cargo-

      - name: Compile
        shell: bash
        run: |
          if ${{ matrix.os == 'ubuntu-latest' }}; then
            crates=${{ env.LINUX_CRATES }}
          elif ${{ matrix.os == 'macos-latest' }}; then
            crates=${{ env.MACOS_CRATES }}
          elif ${{ matrix.os == 'windows-latest' }}; then
            crates=${{ env.WIN_CRATES }}
          fi

          for crate in ${crates[*]}
          do
            cd $crate
            cargo test --no-run --locked
            cd ..
          done

      - name: Test
        shell: bash
        run: |
          if ${{ matrix.os == 'ubuntu-latest' }}; then
            crates=${{ env.LINUX_CRATES }}
          elif ${{ matrix.os == 'macos-latest' }}; then
            crates=${{ env.MACOS_CRATES }}
          elif ${{ matrix.os == 'windows-latest' }}; then
            crates=${{ env.WIN_CRATES }}
          fi

          for crate in ${crates[*]}
          do
            cd $crate
            cargo test --no-default-features -- --nocapture --quiet
            cd ..
          done

  rust-clippy-lint:
    name: Rust Clippy Lint
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: clippy

      - uses: actions/cache@v2
        with:
          path: target/
          key: rust-ci-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            rust-ci-${{ runner.os }}-cargo-

      - name: Clippy Lint
        shell: bash
        run: |
          if ${{ matrix.os == 'ubuntu-latest' }}; then
            crates=${{ env.LINUX_CRATES }}
          elif ${{ matrix.os == 'macos-latest' }}; then
            crates=${{ env.MACOS_CRATES }}
          elif ${{ matrix.os == 'windows-latest' }}; then
            crates=${{ env.WIN_CRATES }}
          fi

          for crate in ${crates[*]}
          do
            cd $crate
            cargo clippy --all-targets --all-features -- -D warnings
            cd ..
          done

  rust-fmt-lint:
    name: Rust Fmt Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt

      - name: Fmt Lint
        run: cargo fmt -- --color always --check
