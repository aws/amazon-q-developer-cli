name: Release

on:
  workflow_dispatch:
  push:
    tags: [ v* ]

jobs:
  release:
    runs-on: macos-10.15
    # timeout-minutes: 15
    steps:
      - name: "Checkout Project"
        uses: actions/checkout@v2

      #
      # Setup
      #

      - name: "Select Xcode 11.3.1"
        uses: devbotsxyz/xcode-select@main
        with:
          version: "11.3.1"

      - name: "Import Certificate"
        uses: devbotsxyz/import-signing-certificate@main
        with:
          certificate-data: ${{ secrets.SIGNING_CERTIFICATE_P12_DATA }}
          certificate-passphrase: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}


      #
      # Fail early on failing tests.
      # Disabled because this project does not have tests. (TODO Add some example tests)
      #

      #- name: "Test"
      #  uses: devbotsxyz/xcode-test@v1

      #https://stackoverflow.com/questions/39500634/use-xcodebuild-xcode-8-and-automatic-signing-in-ci-travis-jenkins-environmen/39559864#39559864
      # - name: "Switch to manual code signing"
      #   run: sed -i '' 's/ProvisioningStyle = Automatic;/ProvisioningStyle = Manual;/' fig.xcodeproj/project.pbxproj

      #
      # First we do a developer build that we archive into an
      # .xcarchive.
      #
      - name: "Create exportOptions.plist"
        run: |
          echo $FILE_BASE64 | base64 -D > $FILE_NAME
        env:
          FILE_NAME: "exportOptions.plist"
          FILE_BASE64: "PCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KICAgIDxrZXk+bWV0aG9kPC9rZXk+CiAgICA8c3RyaW5nPmRldmVsb3BtZW50PC9zdHJpbmc+CiAgICA8a2V5PnRlYW1JRDwva2V5PgogICAgPHN0cmluZz5EOTNQUEQ5NFdLPC9zdHJpbmc+CjwvZGljdD4KPC9wbGlzdD4="
     
      - name: "Test"
        run: cat exportOptions.plist
      - name: "Archive"
        uses: devbotsxyz/xcode-archive@v1

      #
      # Next ask Xcode to export the product from the archived build
      # we just created. This will also re-sign the application with
      # the "Developer ID" certificate.
      #

      - name: "Export & Sign Release Build"
        uses: mattschrage/xcode-export-archive@main
        with:
          export-method: "development"

      #
      # Now send the product to Apple's notarization service and then
      # staple it.
      #

      - name: "Notarize Release Build"
        uses: devbotsxyz/xcode-notarize@v1
        with:
          product-path: "Export/Fig.app"
          appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}

      - name: "Staple Release Build"
        uses: devbotsxyz/xcode-staple@v1
        with:
          product-path: "Export/Fig.app"

      - name: Setup Node Environment
        uses: actions/setup-node@v1
      - name: Install create-dmg
        run: npm install --global create-dmg

      - name: Create DMG
        run: create-dmg "Export/Fig.app"

      # - name: Package for Distribution
      #   run: ditto -V -c -k --keepParent "Export/Rings.app" "Rings.zip"

      # - name: Release app
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: Rings.zip
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}